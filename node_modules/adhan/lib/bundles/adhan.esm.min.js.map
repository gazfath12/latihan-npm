{"version":3,"file":"adhan.esm.min.js","sources":["../../src/Madhab.ts","../../src/HighLatitudeRule.ts","../../src/Coordinates.ts","../../src/Rounding.ts","../../src/DateUtils.ts","../../src/MathUtils.ts","../../src/Shafaq.ts","../../src/Astronomical.ts","../../src/SolarCoordinates.ts","../../src/SolarTime.ts","../../src/PolarCircleResolution.ts","../../src/CalculationParameters.ts","../../src/CalculationMethod.ts","../../src/Prayer.ts","../../src/TimeComponents.ts","../../src/PrayerTimes.ts","../../src/Qibla.ts","../../src/SunnahTimes.ts"],"sourcesContent":["import { ValueOf } from './TypeUtils';\n\nexport const Madhab = {\n  Shafi: 'shafi',\n  Hanafi: 'hanafi',\n} as const;\n\nexport function shadowLength(madhab: ValueOf<typeof Madhab>) {\n  switch (madhab) {\n    case Madhab.Shafi:\n      return 1;\n    case Madhab.Hanafi:\n      return 2;\n    default:\n      throw 'Invalid Madhab';\n  }\n}\n","import type Coordinates from './Coordinates';\n\nconst HighLatitudeRule = {\n  MiddleOfTheNight: 'middleofthenight',\n  SeventhOfTheNight: 'seventhofthenight',\n  TwilightAngle: 'twilightangle',\n\n  recommended(coordinates: Coordinates) {\n    if (coordinates.latitude > 48) {\n      return HighLatitudeRule.SeventhOfTheNight;\n    } else {\n      return HighLatitudeRule.MiddleOfTheNight;\n    }\n  },\n} as const;\n\nexport default HighLatitudeRule;\n","export default class Coordinates {\n  constructor(public latitude: number, public longitude: number) {}\n}\n","export const Rounding = {\n  Nearest: 'nearest',\n  Up: 'up',\n  None: 'none',\n} as const;\n","import Astronomical from './Astronomical';\nimport { Rounding } from './Rounding';\nimport { ValueOf } from './TypeUtils';\n\nexport function dateByAddingDays(date: Date, days: number) {\n  const year = date.getFullYear();\n  const month = date.getMonth();\n  const day = date.getDate() + days;\n  const hours = date.getHours();\n  const minutes = date.getMinutes();\n  const seconds = date.getSeconds();\n  return new Date(year, month, day, hours, minutes, seconds);\n}\n\nexport function dateByAddingMinutes(date: Date, minutes: number) {\n  return dateByAddingSeconds(date, minutes * 60);\n}\n\nexport function dateByAddingSeconds(date: Date, seconds: number) {\n  return new Date(date.getTime() + seconds * 1000);\n}\n\nexport function roundedMinute(\n  date: Date,\n  rounding: ValueOf<typeof Rounding> = Rounding.Nearest,\n) {\n  const seconds = date.getUTCSeconds();\n  let offset = seconds >= 30 ? 60 - seconds : -1 * seconds;\n  if (rounding === Rounding.Up) {\n    offset = 60 - seconds;\n  } else if (rounding === Rounding.None) {\n    offset = 0;\n  }\n\n  return dateByAddingSeconds(date, offset);\n}\n\nexport function dayOfYear(date: Date) {\n  let returnedDayOfYear = 0;\n  const feb = Astronomical.isLeapYear(date.getFullYear()) ? 29 : 28;\n  const months = [31, feb, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  for (let i = 0; i < date.getMonth(); i++) {\n    returnedDayOfYear += months[i];\n  }\n\n  returnedDayOfYear += date.getDate();\n\n  return returnedDayOfYear;\n}\n\nexport function isValidDate(date: Date) {\n  return date instanceof Date && !isNaN(date.valueOf());\n}\n","export function degreesToRadians(degrees: number) {\n  return (degrees * Math.PI) / 180.0;\n}\n\nexport function radiansToDegrees(radians: number) {\n  return (radians * 180.0) / Math.PI;\n}\n\nexport function normalizeToScale(num: number, max: number) {\n  return num - max * Math.floor(num / max);\n}\n\nexport function unwindAngle(angle: number) {\n  return normalizeToScale(angle, 360.0);\n}\n\nexport function quadrantShiftAngle(angle: number) {\n  if (angle >= -180 && angle <= 180) {\n    return angle;\n  }\n\n  return angle - 360 * Math.round(angle / 360);\n}\n","// Shafaq is the twilight in the sky. Different madhabs define the appearance of\n// twilight differently. These values are used by the MoonsightingComittee method\n// for the different ways to calculate Isha.\nexport const Shafaq = {\n  // General is a combination of Ahmer and Abyad.\n  General: 'general',\n\n  // Ahmer means the twilight is the red glow in the sky. Used by the Shafi, Maliki, and Hanbali madhabs.\n  Ahmer: 'ahmer',\n\n  // Abyad means the twilight is the white glow in the sky. Used by the Hanafi madhab.\n  Abyad: 'abyad',\n} as const;\n","/* eslint-disable max-params, max-lines */\nimport Coordinates from './Coordinates';\nimport { dateByAddingSeconds } from './DateUtils';\nimport {\n  degreesToRadians,\n  normalizeToScale,\n  quadrantShiftAngle,\n  radiansToDegrees,\n  unwindAngle,\n} from './MathUtils';\nimport { Shafaq } from './Shafaq';\nimport { ValueOf } from './TypeUtils';\n\nconst Astronomical = {\n  /* The geometric mean longitude of the sun in degrees. */\n  meanSolarLongitude(julianCentury: number) {\n    const T = julianCentury;\n    /* Equation from Astronomical Algorithms page 163 */\n    const term1 = 280.4664567;\n    const term2 = 36000.76983 * T;\n    const term3 = 0.0003032 * Math.pow(T, 2);\n    const L0 = term1 + term2 + term3;\n    return unwindAngle(L0);\n  },\n\n  /* The geometric mean longitude of the moon in degrees. */\n  meanLunarLongitude(julianCentury: number) {\n    const T = julianCentury;\n    /* Equation from Astronomical Algorithms page 144 */\n    const term1 = 218.3165;\n    const term2 = 481267.8813 * T;\n    const Lp = term1 + term2;\n    return unwindAngle(Lp);\n  },\n\n  ascendingLunarNodeLongitude(julianCentury: number) {\n    const T = julianCentury;\n    /* Equation from Astronomical Algorithms page 144 */\n    const term1 = 125.04452;\n    const term2 = 1934.136261 * T;\n    const term3 = 0.0020708 * Math.pow(T, 2);\n    const term4 = Math.pow(T, 3) / 450000;\n    const Omega = term1 - term2 + term3 + term4;\n    return unwindAngle(Omega);\n  },\n\n  /* The mean anomaly of the sun. */\n  meanSolarAnomaly(julianCentury: number) {\n    const T = julianCentury;\n    /* Equation from Astronomical Algorithms page 163 */\n    const term1 = 357.52911;\n    const term2 = 35999.05029 * T;\n    const term3 = 0.0001537 * Math.pow(T, 2);\n    const M = term1 + term2 - term3;\n    return unwindAngle(M);\n  },\n\n  /* The Sun's equation of the center in degrees. */\n  solarEquationOfTheCenter(julianCentury: number, meanAnomaly: number) {\n    const T = julianCentury;\n    /* Equation from Astronomical Algorithms page 164 */\n    const Mrad = degreesToRadians(meanAnomaly);\n    const term1 =\n      (1.914602 - 0.004817 * T - 0.000014 * Math.pow(T, 2)) * Math.sin(Mrad);\n    const term2 = (0.019993 - 0.000101 * T) * Math.sin(2 * Mrad);\n    const term3 = 0.000289 * Math.sin(3 * Mrad);\n    return term1 + term2 + term3;\n  },\n\n  /* The apparent longitude of the Sun, referred to the\n        true equinox of the date. */\n  apparentSolarLongitude(julianCentury: number, meanLongitude: number) {\n    const T = julianCentury;\n    const L0 = meanLongitude;\n    /* Equation from Astronomical Algorithms page 164 */\n    const longitude =\n      L0 +\n      Astronomical.solarEquationOfTheCenter(\n        T,\n        Astronomical.meanSolarAnomaly(T),\n      );\n    const Omega = 125.04 - 1934.136 * T;\n    const Lambda =\n      longitude - 0.00569 - 0.00478 * Math.sin(degreesToRadians(Omega));\n    return unwindAngle(Lambda);\n  },\n\n  /* The mean obliquity of the ecliptic, formula\n        adopted by the International Astronomical Union.\n        Represented in degrees. */\n  meanObliquityOfTheEcliptic(julianCentury: number) {\n    const T = julianCentury;\n    /* Equation from Astronomical Algorithms page 147 */\n    const term1 = 23.439291;\n    const term2 = 0.013004167 * T;\n    const term3 = 0.0000001639 * Math.pow(T, 2);\n    const term4 = 0.0000005036 * Math.pow(T, 3);\n    return term1 - term2 - term3 + term4;\n  },\n\n  /* The mean obliquity of the ecliptic, corrected for\n        calculating the apparent position of the sun, in degrees. */\n  apparentObliquityOfTheEcliptic(\n    julianCentury: number,\n    meanObliquityOfTheEcliptic: number,\n  ) {\n    const T = julianCentury;\n    const Epsilon0 = meanObliquityOfTheEcliptic;\n    /* Equation from Astronomical Algorithms page 165 */\n    const O = 125.04 - 1934.136 * T;\n    return Epsilon0 + 0.00256 * Math.cos(degreesToRadians(O));\n  },\n\n  /* Mean sidereal time, the hour angle of the vernal equinox, in degrees. */\n  meanSiderealTime(julianCentury: number) {\n    const T = julianCentury;\n    /* Equation from Astronomical Algorithms page 165 */\n    const JD = T * 36525 + 2451545.0;\n    const term1 = 280.46061837;\n    const term2 = 360.98564736629 * (JD - 2451545);\n    const term3 = 0.000387933 * Math.pow(T, 2);\n    const term4 = Math.pow(T, 3) / 38710000;\n    const Theta = term1 + term2 + term3 - term4;\n    return unwindAngle(Theta);\n  },\n\n  nutationInLongitude(\n    julianCentury: number,\n    solarLongitude: number,\n    lunarLongitude: number,\n    ascendingNode: number,\n  ) {\n    const L0 = solarLongitude;\n    const Lp = lunarLongitude;\n    const Omega = ascendingNode;\n    /* Equation from Astronomical Algorithms page 144 */\n    const term1 = (-17.2 / 3600) * Math.sin(degreesToRadians(Omega));\n    const term2 = (1.32 / 3600) * Math.sin(2 * degreesToRadians(L0));\n    const term3 = (0.23 / 3600) * Math.sin(2 * degreesToRadians(Lp));\n    const term4 = (0.21 / 3600) * Math.sin(2 * degreesToRadians(Omega));\n    return term1 - term2 - term3 + term4;\n  },\n\n  nutationInObliquity(\n    julianCentury: number,\n    solarLongitude: number,\n    lunarLongitude: number,\n    ascendingNode: number,\n  ) {\n    const L0 = solarLongitude;\n    const Lp = lunarLongitude;\n    const Omega = ascendingNode;\n    /* Equation from Astronomical Algorithms page 144 */\n    const term1 = (9.2 / 3600) * Math.cos(degreesToRadians(Omega));\n    const term2 = (0.57 / 3600) * Math.cos(2 * degreesToRadians(L0));\n    const term3 = (0.1 / 3600) * Math.cos(2 * degreesToRadians(Lp));\n    const term4 = (0.09 / 3600) * Math.cos(2 * degreesToRadians(Omega));\n    return term1 + term2 + term3 - term4;\n  },\n\n  altitudeOfCelestialBody(\n    observerLatitude: number,\n    declination: number,\n    localHourAngle: number,\n  ) {\n    const Phi = observerLatitude;\n    const delta = declination;\n    const H = localHourAngle;\n    /* Equation from Astronomical Algorithms page 93 */\n    const term1 =\n      Math.sin(degreesToRadians(Phi)) * Math.sin(degreesToRadians(delta));\n    const term2 =\n      Math.cos(degreesToRadians(Phi)) *\n      Math.cos(degreesToRadians(delta)) *\n      Math.cos(degreesToRadians(H));\n    return radiansToDegrees(Math.asin(term1 + term2));\n  },\n\n  approximateTransit(\n    longitude: number,\n    siderealTime: number,\n    rightAscension: number,\n  ) {\n    const L = longitude;\n    const Theta0 = siderealTime;\n    const a2 = rightAscension;\n    /* Equation from page Astronomical Algorithms 102 */\n    const Lw = L * -1;\n    return normalizeToScale((a2 + Lw - Theta0) / 360, 1);\n  },\n\n  /* The time at which the sun is at its highest point in the sky (in universal time) */\n  correctedTransit(\n    approximateTransit: number,\n    longitude: number,\n    siderealTime: number,\n    rightAscension: number,\n    previousRightAscension: number,\n    nextRightAscension: number,\n  ) {\n    const m0 = approximateTransit;\n    const L = longitude;\n    const Theta0 = siderealTime;\n    const a2 = rightAscension;\n    const a1 = previousRightAscension;\n    const a3 = nextRightAscension;\n    /* Equation from page Astronomical Algorithms 102 */\n    const Lw = L * -1;\n    const Theta = unwindAngle(Theta0 + 360.985647 * m0);\n    const a = unwindAngle(Astronomical.interpolateAngles(a2, a1, a3, m0));\n    const H = quadrantShiftAngle(Theta - Lw - a);\n    const dm = H / -360;\n    return (m0 + dm) * 24;\n  },\n\n  correctedHourAngle(\n    approximateTransit: number,\n    angle: number,\n    coordinates: Coordinates,\n    afterTransit: boolean,\n    siderealTime: number,\n    rightAscension: number,\n    previousRightAscension: number,\n    nextRightAscension: number,\n    declination: number,\n    previousDeclination: number,\n    nextDeclination: number,\n  ) {\n    const m0 = approximateTransit;\n    const h0 = angle;\n    const Theta0 = siderealTime;\n    const a2 = rightAscension;\n    const a1 = previousRightAscension;\n    const a3 = nextRightAscension;\n    const d2 = declination;\n    const d1 = previousDeclination;\n    const d3 = nextDeclination;\n\n    /* Equation from page Astronomical Algorithms 102 */\n    const Lw = coordinates.longitude * -1;\n    const term1 =\n      Math.sin(degreesToRadians(h0)) -\n      Math.sin(degreesToRadians(coordinates.latitude)) *\n        Math.sin(degreesToRadians(d2));\n    const term2 =\n      Math.cos(degreesToRadians(coordinates.latitude)) *\n      Math.cos(degreesToRadians(d2));\n    const H0 = radiansToDegrees(Math.acos(term1 / term2));\n    const m = afterTransit ? m0 + H0 / 360 : m0 - H0 / 360;\n    const Theta = unwindAngle(Theta0 + 360.985647 * m);\n    const a = unwindAngle(Astronomical.interpolateAngles(a2, a1, a3, m));\n    const delta = Astronomical.interpolate(d2, d1, d3, m);\n    const H = Theta - Lw - a;\n    const h = Astronomical.altitudeOfCelestialBody(\n      coordinates.latitude,\n      delta,\n      H,\n    );\n    const term3 = h - h0;\n    const term4 =\n      360 *\n      Math.cos(degreesToRadians(delta)) *\n      Math.cos(degreesToRadians(coordinates.latitude)) *\n      Math.sin(degreesToRadians(H));\n    const dm = term3 / term4;\n    return (m + dm) * 24;\n  },\n\n  /* Interpolation of a value given equidistant\n        previous and next values and a factor\n        equal to the fraction of the interpolated\n        point's time over the time between values. */\n  interpolate(y2: number, y1: number, y3: number, n: number) {\n    /* Equation from Astronomical Algorithms page 24 */\n    const a = y2 - y1;\n    const b = y3 - y2;\n    const c = b - a;\n    return y2 + (n / 2) * (a + b + n * c);\n  },\n\n  /* Interpolation of three angles, accounting for\n        angle unwinding. */\n  interpolateAngles(y2: number, y1: number, y3: number, n: number) {\n    /* Equation from Astronomical Algorithms page 24 */\n    const a = unwindAngle(y2 - y1);\n    const b = unwindAngle(y3 - y2);\n    const c = b - a;\n    return y2 + (n / 2) * (a + b + n * c);\n  },\n\n  /* The Julian Day for the given Gregorian date components. */\n  julianDay(year: number, month: number, day: number, hours = 0) {\n    /* Equation from Astronomical Algorithms page 60 */\n\n    const trunc = Math.trunc;\n\n    const Y = trunc(month > 2 ? year : year - 1);\n    const M = trunc(month > 2 ? month : month + 12);\n    const D = day + hours / 24;\n\n    const A = trunc(Y / 100);\n    const B = trunc(2 - A + trunc(A / 4));\n\n    const i0 = trunc(365.25 * (Y + 4716));\n    const i1 = trunc(30.6001 * (M + 1));\n\n    return i0 + i1 + D + B - 1524.5;\n  },\n\n  /* Julian century from the epoch. */\n  julianCentury(julianDay: number) {\n    /* Equation from Astronomical Algorithms page 163 */\n    return (julianDay - 2451545.0) / 36525;\n  },\n\n  /* Whether or not a year is a leap year (has 366 days). */\n  isLeapYear(year: number) {\n    if (year % 4 !== 0) {\n      return false;\n    }\n\n    if (year % 100 === 0 && year % 400 !== 0) {\n      return false;\n    }\n\n    return true;\n  },\n\n  seasonAdjustedMorningTwilight(\n    latitude: number,\n    dayOfYear: number,\n    year: number,\n    sunrise: Date,\n  ) {\n    const a = 75 + (28.65 / 55.0) * Math.abs(latitude);\n    const b = 75 + (19.44 / 55.0) * Math.abs(latitude);\n    const c = 75 + (32.74 / 55.0) * Math.abs(latitude);\n    const d = 75 + (48.1 / 55.0) * Math.abs(latitude);\n\n    const adjustment = (function () {\n      const dyy = Astronomical.daysSinceSolstice(dayOfYear, year, latitude);\n      if (dyy < 91) {\n        return a + ((b - a) / 91.0) * dyy;\n      } else if (dyy < 137) {\n        return b + ((c - b) / 46.0) * (dyy - 91);\n      } else if (dyy < 183) {\n        return c + ((d - c) / 46.0) * (dyy - 137);\n      } else if (dyy < 229) {\n        return d + ((c - d) / 46.0) * (dyy - 183);\n      } else if (dyy < 275) {\n        return c + ((b - c) / 46.0) * (dyy - 229);\n      } else {\n        return b + ((a - b) / 91.0) * (dyy - 275);\n      }\n    })();\n\n    return dateByAddingSeconds(sunrise, Math.round(adjustment * -60.0));\n  },\n\n  seasonAdjustedEveningTwilight(\n    latitude: number,\n    dayOfYear: number,\n    year: number,\n    sunset: Date,\n    shafaq: ValueOf<typeof Shafaq>,\n  ) {\n    let a, b, c, d;\n    if (shafaq === Shafaq.Ahmer) {\n      a = 62 + (17.4 / 55.0) * Math.abs(latitude);\n      b = 62 - (7.16 / 55.0) * Math.abs(latitude);\n      c = 62 + (5.12 / 55.0) * Math.abs(latitude);\n      d = 62 + (19.44 / 55.0) * Math.abs(latitude);\n    } else if (shafaq === Shafaq.Abyad) {\n      a = 75 + (25.6 / 55.0) * Math.abs(latitude);\n      b = 75 + (7.16 / 55.0) * Math.abs(latitude);\n      c = 75 + (36.84 / 55.0) * Math.abs(latitude);\n      d = 75 + (81.84 / 55.0) * Math.abs(latitude);\n    } else {\n      a = 75 + (25.6 / 55.0) * Math.abs(latitude);\n      b = 75 + (2.05 / 55.0) * Math.abs(latitude);\n      c = 75 - (9.21 / 55.0) * Math.abs(latitude);\n      d = 75 + (6.14 / 55.0) * Math.abs(latitude);\n    }\n\n    const adjustment = (function () {\n      const dyy = Astronomical.daysSinceSolstice(dayOfYear, year, latitude);\n      if (dyy < 91) {\n        return a + ((b - a) / 91.0) * dyy;\n      } else if (dyy < 137) {\n        return b + ((c - b) / 46.0) * (dyy - 91);\n      } else if (dyy < 183) {\n        return c + ((d - c) / 46.0) * (dyy - 137);\n      } else if (dyy < 229) {\n        return d + ((c - d) / 46.0) * (dyy - 183);\n      } else if (dyy < 275) {\n        return c + ((b - c) / 46.0) * (dyy - 229);\n      } else {\n        return b + ((a - b) / 91.0) * (dyy - 275);\n      }\n    })();\n\n    return dateByAddingSeconds(sunset, Math.round(adjustment * 60.0));\n  },\n\n  daysSinceSolstice(dayOfYear: number, year: number, latitude: number) {\n    let daysSinceSolstice = 0;\n    const northernOffset = 10;\n    const southernOffset = Astronomical.isLeapYear(year) ? 173 : 172;\n    const daysInYear = Astronomical.isLeapYear(year) ? 366 : 365;\n\n    if (latitude >= 0) {\n      daysSinceSolstice = dayOfYear + northernOffset;\n      if (daysSinceSolstice >= daysInYear) {\n        daysSinceSolstice = daysSinceSolstice - daysInYear;\n      }\n    } else {\n      daysSinceSolstice = dayOfYear - southernOffset;\n      if (daysSinceSolstice < 0) {\n        daysSinceSolstice = daysSinceSolstice + daysInYear;\n      }\n    }\n\n    return daysSinceSolstice;\n  },\n};\n\nexport default Astronomical;\n","import Astronomical from './Astronomical';\nimport { degreesToRadians, radiansToDegrees, unwindAngle } from './MathUtils';\n\nexport default class SolarCoordinates {\n  declination: number;\n  rightAscension: number;\n  apparentSiderealTime: number;\n\n  constructor(julianDay: number) {\n    const T = Astronomical.julianCentury(julianDay);\n    const L0 = Astronomical.meanSolarLongitude(T);\n    const Lp = Astronomical.meanLunarLongitude(T);\n    const Omega = Astronomical.ascendingLunarNodeLongitude(T);\n    const Lambda = degreesToRadians(Astronomical.apparentSolarLongitude(T, L0));\n    const Theta0 = Astronomical.meanSiderealTime(T);\n    const dPsi = Astronomical.nutationInLongitude(T, L0, Lp, Omega);\n    const dEpsilon = Astronomical.nutationInObliquity(T, L0, Lp, Omega);\n    const Epsilon0 = Astronomical.meanObliquityOfTheEcliptic(T);\n    const EpsilonApparent = degreesToRadians(\n      Astronomical.apparentObliquityOfTheEcliptic(T, Epsilon0),\n    );\n\n    /* declination: The declination of the sun, the angle between\n            the rays of the Sun and the plane of the Earth's\n            equator, in degrees.\n            Equation from Astronomical Algorithms page 165 */\n    this.declination = radiansToDegrees(\n      Math.asin(Math.sin(EpsilonApparent) * Math.sin(Lambda)),\n    );\n\n    /* rightAscension: Right ascension of the Sun, the angular distance on the\n            celestial equator from the vernal equinox to the hour circle,\n            in degrees.\n            Equation from Astronomical Algorithms page 165 */\n    this.rightAscension = unwindAngle(\n      radiansToDegrees(\n        Math.atan2(\n          Math.cos(EpsilonApparent) * Math.sin(Lambda),\n          Math.cos(Lambda),\n        ),\n      ),\n    );\n\n    /* apparentSiderealTime: Apparent sidereal time, the hour angle of the vernal\n            equinox, in degrees.\n            Equation from Astronomical Algorithms page 88 */\n    this.apparentSiderealTime =\n      Theta0 +\n      (dPsi * 3600 * Math.cos(degreesToRadians(Epsilon0 + dEpsilon))) / 3600;\n  }\n}\n","import Astronomical from './Astronomical';\nimport type Coordinates from './Coordinates';\nimport { degreesToRadians, radiansToDegrees } from './MathUtils';\nimport SolarCoordinates from './SolarCoordinates';\n\nexport default class SolarTime {\n  observer: Coordinates;\n  solar: SolarCoordinates;\n  prevSolar: SolarCoordinates;\n  nextSolar: SolarCoordinates;\n  approxTransit: number;\n  transit: number;\n  sunrise: number;\n  sunset: number;\n\n  constructor(date: Date, coordinates: Coordinates) {\n    const julianDay = Astronomical.julianDay(\n      date.getFullYear(),\n      date.getMonth() + 1,\n      date.getDate(),\n      0,\n    );\n\n    this.observer = coordinates;\n    this.solar = new SolarCoordinates(julianDay);\n\n    this.prevSolar = new SolarCoordinates(julianDay - 1);\n    this.nextSolar = new SolarCoordinates(julianDay + 1);\n\n    const m0 = Astronomical.approximateTransit(\n      coordinates.longitude,\n      this.solar.apparentSiderealTime,\n      this.solar.rightAscension,\n    );\n    const solarAltitude = -50.0 / 60.0;\n\n    this.approxTransit = m0;\n\n    this.transit = Astronomical.correctedTransit(\n      m0,\n      coordinates.longitude,\n      this.solar.apparentSiderealTime,\n      this.solar.rightAscension,\n      this.prevSolar.rightAscension,\n      this.nextSolar.rightAscension,\n    );\n\n    this.sunrise = Astronomical.correctedHourAngle(\n      m0,\n      solarAltitude,\n      coordinates,\n      false,\n      this.solar.apparentSiderealTime,\n      this.solar.rightAscension,\n      this.prevSolar.rightAscension,\n      this.nextSolar.rightAscension,\n      this.solar.declination,\n      this.prevSolar.declination,\n      this.nextSolar.declination,\n    );\n\n    this.sunset = Astronomical.correctedHourAngle(\n      m0,\n      solarAltitude,\n      coordinates,\n      true,\n      this.solar.apparentSiderealTime,\n      this.solar.rightAscension,\n      this.prevSolar.rightAscension,\n      this.nextSolar.rightAscension,\n      this.solar.declination,\n      this.prevSolar.declination,\n      this.nextSolar.declination,\n    );\n  }\n\n  hourAngle(angle: number, afterTransit: boolean) {\n    return Astronomical.correctedHourAngle(\n      this.approxTransit,\n      angle,\n      this.observer,\n      afterTransit,\n      this.solar.apparentSiderealTime,\n      this.solar.rightAscension,\n      this.prevSolar.rightAscension,\n      this.nextSolar.rightAscension,\n      this.solar.declination,\n      this.prevSolar.declination,\n      this.nextSolar.declination,\n    );\n  }\n\n  afternoon(shadowLength: number) {\n    // TODO source shadow angle calculation\n    const tangent = Math.abs(this.observer.latitude - this.solar.declination);\n    const inverse = shadowLength + Math.tan(degreesToRadians(tangent));\n    const angle = radiansToDegrees(Math.atan(1.0 / inverse));\n    return this.hourAngle(angle, true);\n  }\n}\n","import Coordinates from './Coordinates';\nimport SolarTime from './SolarTime';\nimport { dateByAddingDays } from './DateUtils';\nimport { ValueOf } from './TypeUtils';\n\nexport const PolarCircleResolution = {\n  AqrabBalad: 'AqrabBalad',\n  AqrabYaum: 'AqrabYaum',\n  Unresolved: 'Unresolved',\n} as const;\n\nconst LATITUDE_VARIATION_STEP = 0.5; // Degrees to add/remove at each resolution step\nconst UNSAFE_LATITUDE = 65; // Based on https://en.wikipedia.org/wiki/Midnight_sun\n\nconst isValidSolarTime = (solarTime: SolarTime) =>\n  !isNaN(solarTime.sunrise) && !isNaN(solarTime.sunset);\n\nconst aqrabYaumResolver = (\n  coordinates: Coordinates,\n  date: Date,\n  daysAdded = 1,\n  direction = 1,\n): {\n  date: Date;\n  tomorrow: Date;\n  coordinates: Coordinates;\n  solarTime: SolarTime;\n  tomorrowSolarTime: SolarTime;\n} | null => {\n  if (daysAdded > Math.ceil(365 / 2)) {\n    return null;\n  }\n  const testDate = new Date(date.getTime());\n  testDate.setDate(testDate.getDate() + direction * daysAdded);\n  const tomorrow = dateByAddingDays(testDate, 1);\n  const solarTime = new SolarTime(testDate, coordinates);\n  const tomorrowSolarTime = new SolarTime(tomorrow, coordinates);\n\n  if (!isValidSolarTime(solarTime) || !isValidSolarTime(tomorrowSolarTime)) {\n    return aqrabYaumResolver(\n      coordinates,\n      date,\n      daysAdded + (direction > 0 ? 0 : 1),\n      -direction,\n    );\n  }\n\n  return {\n    date,\n    tomorrow,\n    coordinates,\n    solarTime,\n    tomorrowSolarTime,\n  };\n};\n\nconst aqrabBaladResolver = (\n  coordinates: Coordinates,\n  date: Date,\n  latitude: number,\n): {\n  date: Date;\n  tomorrow: Date;\n  coordinates: Coordinates;\n  solarTime: SolarTime;\n  tomorrowSolarTime: SolarTime;\n} | null => {\n  const solarTime = new SolarTime(date, { ...coordinates, latitude });\n  const tomorrow = dateByAddingDays(date, 1);\n  const tomorrowSolarTime = new SolarTime(tomorrow, {\n    ...coordinates,\n    latitude,\n  });\n  if (!isValidSolarTime(solarTime) || !isValidSolarTime(tomorrowSolarTime)) {\n    return Math.abs(latitude) >= UNSAFE_LATITUDE\n      ? aqrabBaladResolver(\n          coordinates,\n          date,\n          latitude - Math.sign(latitude) * LATITUDE_VARIATION_STEP,\n        )\n      : null;\n  }\n\n  return {\n    date,\n    tomorrow,\n    coordinates: new Coordinates(latitude, coordinates.longitude),\n    solarTime,\n    tomorrowSolarTime,\n  };\n};\n\nexport const polarCircleResolvedValues = (\n  resolver: ValueOf<typeof PolarCircleResolution>,\n  date: Date,\n  coordinates: Coordinates,\n) => {\n  const defaultReturn = {\n    date,\n    tomorrow: dateByAddingDays(date, 1),\n    coordinates,\n    solarTime: new SolarTime(date, coordinates),\n    tomorrowSolarTime: new SolarTime(dateByAddingDays(date, 1), coordinates),\n  };\n\n  switch (resolver) {\n    case PolarCircleResolution.AqrabYaum: {\n      return aqrabYaumResolver(coordinates, date) || defaultReturn;\n    }\n    case PolarCircleResolution.AqrabBalad: {\n      const { latitude } = coordinates;\n      return (\n        aqrabBaladResolver(\n          coordinates,\n          date,\n          latitude - Math.sign(latitude) * LATITUDE_VARIATION_STEP,\n        ) || defaultReturn\n      );\n    }\n    default: {\n      return defaultReturn;\n    }\n  }\n};\n","import type CalculationMethod from './CalculationMethod';\nimport { Madhab } from './Madhab';\nimport HighLatitudeRule from './HighLatitudeRule';\nimport { PolarCircleResolution } from './PolarCircleResolution';\nimport { Rounding } from './Rounding';\nimport { Shafaq } from './Shafaq';\nimport { ValueOf } from './TypeUtils';\n\nexport default class CalculationParameters {\n  // Madhab to determine how Asr is calculated.\n  madhab: ValueOf<typeof Madhab> = Madhab.Shafi;\n\n  // Rule to determine the earliest time for Fajr and latest time for Isha\n  // needed for high latitude locations where Fajr and Isha may not truly exist\n  // or may present a hardship unless bound to a reasonable time.\n  highLatitudeRule: ValueOf<typeof HighLatitudeRule> =\n    HighLatitudeRule.MiddleOfTheNight;\n\n  // Manual adjustments (in minutes) to be added to each prayer time.\n  adjustments = {\n    fajr: 0,\n    sunrise: 0,\n    dhuhr: 0,\n    asr: 0,\n    maghrib: 0,\n    isha: 0,\n  };\n\n  // Adjustments set by a calculation method. This value should not be manually modified.\n  methodAdjustments = {\n    fajr: 0,\n    sunrise: 0,\n    dhuhr: 0,\n    asr: 0,\n    maghrib: 0,\n    isha: 0,\n  };\n\n  // Rule to determine how to resolve prayer times inside the Polar Circle\n  // where daylight or night may persist for more than 24 hours depending\n  // on the season\n  polarCircleResolution: ValueOf<typeof PolarCircleResolution> =\n    PolarCircleResolution.Unresolved;\n\n  // How seconds are rounded when calculating prayer times\n  rounding: ValueOf<typeof Rounding> = Rounding.Nearest;\n\n  // Used by the MoonsightingCommittee method to determine how to calculate Isha\n  shafaq: ValueOf<typeof Shafaq> = Shafaq.General;\n\n  constructor(\n    // Name of the method, can be used to apply special behavior in calculations.\n    // This property should not be manually modified.\n    public method: null | keyof typeof CalculationMethod,\n    // Angle of the sun below the horizon used for calculating Fajr.\n    public fajrAngle = 0,\n    // Angle of the sun below the horizon used for calculating Isha.\n    public ishaAngle = 0,\n    // Minutes after Maghrib to determine time for Isha\n    // if this value is greater than 0 then ishaAngle is not used.\n    public ishaInterval = 0,\n    // Angle of the sun below the horizon used for calculating Maghrib.\n    // Only used by the Tehran method to account for lightness in the sky.\n    public maghribAngle = 0,\n  ) {\n    if (this.method === null) {\n      // we don't want a breaking change\n      this.method = 'Other';\n    }\n  }\n\n  nightPortions() {\n    switch (this.highLatitudeRule) {\n      case HighLatitudeRule.MiddleOfTheNight:\n        return { fajr: 1 / 2, isha: 1 / 2 };\n      case HighLatitudeRule.SeventhOfTheNight:\n        return { fajr: 1 / 7, isha: 1 / 7 };\n      case HighLatitudeRule.TwilightAngle:\n        return { fajr: this.fajrAngle / 60, isha: this.ishaAngle / 60 };\n      default:\n        throw `Invalid high latitude rule found when attempting to compute night portions: ${this.highLatitudeRule}`;\n    }\n  }\n}\n","import CalculationParameters from './CalculationParameters';\nimport { Rounding } from './Rounding';\n\nconst CalculationMethod = {\n  // Muslim World League\n  MuslimWorldLeague() {\n    const params = new CalculationParameters('MuslimWorldLeague', 18, 17);\n    params.methodAdjustments.dhuhr = 1;\n    return params;\n  },\n\n  // Egyptian General Authority of Survey\n  Egyptian() {\n    const params = new CalculationParameters('Egyptian', 19.5, 17.5);\n    params.methodAdjustments.dhuhr = 1;\n    return params;\n  },\n\n  // University of Islamic Sciences, Karachi\n  Karachi() {\n    const params = new CalculationParameters('Karachi', 18, 18);\n    params.methodAdjustments.dhuhr = 1;\n    return params;\n  },\n\n  // Umm al-Qura University, Makkah\n  UmmAlQura() {\n    return new CalculationParameters('UmmAlQura', 18.5, 0, 90);\n  },\n\n  // Dubai\n  Dubai() {\n    const params = new CalculationParameters('Dubai', 18.2, 18.2);\n    params.methodAdjustments = {\n      ...params.methodAdjustments,\n      sunrise: -3,\n      dhuhr: 3,\n      asr: 3,\n      maghrib: 3,\n    };\n    return params;\n  },\n\n  // Moonsighting Committee\n  MoonsightingCommittee() {\n    const params = new CalculationParameters('MoonsightingCommittee', 18, 18);\n    params.methodAdjustments = {\n      ...params.methodAdjustments,\n      dhuhr: 5,\n      maghrib: 3,\n    };\n\n    return params;\n  },\n\n  // ISNA\n  NorthAmerica() {\n    const params = new CalculationParameters('NorthAmerica', 15, 15);\n    params.methodAdjustments.dhuhr = 1;\n    return params;\n  },\n\n  // Kuwait\n  Kuwait() {\n    return new CalculationParameters('Kuwait', 18, 17.5);\n  },\n\n  // Qatar\n  Qatar() {\n    return new CalculationParameters('Qatar', 18, 0, 90);\n  },\n\n  // Singapore\n  Singapore() {\n    const params = new CalculationParameters('Singapore', 20, 18);\n    params.methodAdjustments.dhuhr = 1;\n    params.rounding = Rounding.Up;\n    return params;\n  },\n\n  // Institute of Geophysics, University of Tehran\n  Tehran() {\n    const params = new CalculationParameters('Tehran', 17.7, 14, 0, 4.5);\n    return params;\n  },\n\n  // Dianet\n  Turkey() {\n    const params = new CalculationParameters('Turkey', 18, 17);\n    params.methodAdjustments = {\n      ...params.methodAdjustments,\n      sunrise: -7,\n      dhuhr: 5,\n      asr: 4,\n      maghrib: 7,\n    };\n    return params;\n  },\n\n  // Other\n  Other() {\n    return new CalculationParameters('Other', 0, 0);\n  },\n} as const;\n\nexport default CalculationMethod;\n","const Prayer = {\n  Fajr: 'fajr',\n  Sunrise: 'sunrise',\n  Dhuhr: 'dhuhr',\n  Asr: 'asr',\n  Maghrib: 'maghrib',\n  Isha: 'isha',\n  None: 'none',\n} as const;\n\nexport default Prayer;\n","export default class TimeComponents {\n  hours: number;\n  minutes: number;\n  seconds: number;\n\n  constructor(num: number) {\n    this.hours = Math.floor(num);\n    this.minutes = Math.floor((num - this.hours) * 60);\n    this.seconds = Math.floor(\n      (num - (this.hours + this.minutes / 60)) * 60 * 60,\n    );\n    return this;\n  }\n\n  utcDate(year: number, month: number, date: number): Date {\n    return new Date(\n      Date.UTC(year, month, date, this.hours, this.minutes, this.seconds),\n    );\n  }\n}\n","import SolarTime from './SolarTime';\nimport TimeComponents from './TimeComponents';\nimport Prayer from './Prayer';\nimport Astronomical from './Astronomical';\nimport CalculationParameters from './CalculationParameters';\nimport Coordinates from './Coordinates';\nimport {\n  dateByAddingDays,\n  dateByAddingMinutes,\n  dateByAddingSeconds,\n  dayOfYear,\n  isValidDate,\n  roundedMinute,\n} from './DateUtils';\nimport { shadowLength } from './Madhab';\nimport {\n  PolarCircleResolution,\n  polarCircleResolvedValues,\n} from './PolarCircleResolution';\nimport { ValueOf } from './TypeUtils';\n\nexport default class PrayerTimes {\n  fajr: Date;\n  sunrise: Date;\n  dhuhr: Date;\n  asr: Date;\n  sunset: Date;\n  maghrib: Date;\n  isha: Date;\n\n  // eslint-disable-next-line complexity\n  constructor(\n    public coordinates: Coordinates,\n    public date: Date,\n    public calculationParameters: CalculationParameters,\n  ) {\n    let solarTime = new SolarTime(date, coordinates);\n\n    let fajrTime: Date;\n    let sunriseTime: Date;\n    let dhuhrTime: Date;\n    let asrTime: Date;\n    let sunsetTime: Date;\n    let maghribTime: Date;\n    let ishaTime: Date;\n\n    let nightFraction;\n\n    dhuhrTime = new TimeComponents(solarTime.transit).utcDate(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate(),\n    );\n    sunriseTime = new TimeComponents(solarTime.sunrise).utcDate(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate(),\n    );\n    sunsetTime = new TimeComponents(solarTime.sunset).utcDate(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate(),\n    );\n    const tomorrow = dateByAddingDays(date, 1);\n    let tomorrowSolarTime = new SolarTime(tomorrow, coordinates);\n\n    const polarCircleResolver = calculationParameters.polarCircleResolution;\n    if (\n      (!isValidDate(sunriseTime) ||\n        !isValidDate(sunsetTime) ||\n        isNaN(tomorrowSolarTime.sunrise)) &&\n      polarCircleResolver !== PolarCircleResolution.Unresolved\n    ) {\n      const resolved = polarCircleResolvedValues(\n        polarCircleResolver,\n        date,\n        coordinates,\n      );\n      solarTime = resolved.solarTime;\n      tomorrowSolarTime = resolved.tomorrowSolarTime;\n      const dateComponents = [\n        date.getFullYear(),\n        date.getMonth(),\n        date.getDate(),\n      ] as const;\n\n      dhuhrTime = new TimeComponents(solarTime.transit).utcDate(\n        ...dateComponents,\n      );\n      sunriseTime = new TimeComponents(solarTime.sunrise).utcDate(\n        ...dateComponents,\n      );\n      sunsetTime = new TimeComponents(solarTime.sunset).utcDate(\n        ...dateComponents,\n      );\n    }\n\n    // eslint-disable-next-line prefer-const\n    asrTime = new TimeComponents(\n      solarTime.afternoon(shadowLength(calculationParameters.madhab)),\n    ).utcDate(date.getFullYear(), date.getMonth(), date.getDate());\n\n    const tomorrowSunrise = new TimeComponents(\n      tomorrowSolarTime.sunrise,\n    ).utcDate(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate());\n    const night = (Number(tomorrowSunrise) - Number(sunsetTime)) / 1000;\n\n    fajrTime = new TimeComponents(\n      solarTime.hourAngle(-1 * calculationParameters.fajrAngle, false),\n    ).utcDate(date.getFullYear(), date.getMonth(), date.getDate());\n\n    // special case for moonsighting committee above latitude 55\n    if (\n      calculationParameters.method === 'MoonsightingCommittee' &&\n      coordinates.latitude >= 55\n    ) {\n      nightFraction = night / 7;\n      fajrTime = dateByAddingSeconds(sunriseTime, -nightFraction);\n    }\n\n    const safeFajr = (function () {\n      if (calculationParameters.method === 'MoonsightingCommittee') {\n        return Astronomical.seasonAdjustedMorningTwilight(\n          coordinates.latitude,\n          dayOfYear(date),\n          date.getFullYear(),\n          sunriseTime,\n        );\n      } else {\n        const portion = calculationParameters.nightPortions().fajr;\n        nightFraction = portion * night;\n        return dateByAddingSeconds(sunriseTime, -nightFraction);\n      }\n    })();\n\n    if (isNaN(fajrTime.getTime()) || safeFajr > fajrTime) {\n      fajrTime = safeFajr;\n    }\n\n    if (calculationParameters.ishaInterval > 0) {\n      ishaTime = dateByAddingMinutes(\n        sunsetTime,\n        calculationParameters.ishaInterval,\n      );\n    } else {\n      ishaTime = new TimeComponents(\n        solarTime.hourAngle(-1 * calculationParameters.ishaAngle, true),\n      ).utcDate(date.getFullYear(), date.getMonth(), date.getDate());\n\n      // special case for moonsighting committee above latitude 55\n      if (\n        calculationParameters.method === 'MoonsightingCommittee' &&\n        coordinates.latitude >= 55\n      ) {\n        nightFraction = night / 7;\n        ishaTime = dateByAddingSeconds(sunsetTime, nightFraction);\n      }\n\n      const safeIsha = (function () {\n        if (calculationParameters.method === 'MoonsightingCommittee') {\n          return Astronomical.seasonAdjustedEveningTwilight(\n            coordinates.latitude,\n            dayOfYear(date),\n            date.getFullYear(),\n            sunsetTime,\n            calculationParameters.shafaq,\n          );\n        } else {\n          const portion = calculationParameters.nightPortions().isha;\n          nightFraction = portion * night;\n          return dateByAddingSeconds(sunsetTime, nightFraction);\n        }\n      })();\n\n      if (isNaN(ishaTime.getTime()) || safeIsha < ishaTime) {\n        ishaTime = safeIsha;\n      }\n    }\n\n    maghribTime = sunsetTime;\n    if (calculationParameters.maghribAngle) {\n      const angleBasedMaghrib = new TimeComponents(\n        solarTime.hourAngle(-1 * calculationParameters.maghribAngle, true),\n      ).utcDate(date.getFullYear(), date.getMonth(), date.getDate());\n      if (sunsetTime < angleBasedMaghrib && ishaTime > angleBasedMaghrib) {\n        maghribTime = angleBasedMaghrib;\n      }\n    }\n\n    const fajrAdjustment =\n      (calculationParameters.adjustments.fajr || 0) +\n      (calculationParameters.methodAdjustments.fajr || 0);\n    const sunriseAdjustment =\n      (calculationParameters.adjustments.sunrise || 0) +\n      (calculationParameters.methodAdjustments.sunrise || 0);\n    const dhuhrAdjustment =\n      (calculationParameters.adjustments.dhuhr || 0) +\n      (calculationParameters.methodAdjustments.dhuhr || 0);\n    const asrAdjustment =\n      (calculationParameters.adjustments.asr || 0) +\n      (calculationParameters.methodAdjustments.asr || 0);\n    const maghribAdjustment =\n      (calculationParameters.adjustments.maghrib || 0) +\n      (calculationParameters.methodAdjustments.maghrib || 0);\n    const ishaAdjustment =\n      (calculationParameters.adjustments.isha || 0) +\n      (calculationParameters.methodAdjustments.isha || 0);\n\n    this.fajr = roundedMinute(\n      dateByAddingMinutes(fajrTime, fajrAdjustment),\n      calculationParameters.rounding,\n    );\n    this.sunrise = roundedMinute(\n      dateByAddingMinutes(sunriseTime, sunriseAdjustment),\n      calculationParameters.rounding,\n    );\n    this.dhuhr = roundedMinute(\n      dateByAddingMinutes(dhuhrTime, dhuhrAdjustment),\n      calculationParameters.rounding,\n    );\n    this.asr = roundedMinute(\n      dateByAddingMinutes(asrTime, asrAdjustment),\n      calculationParameters.rounding,\n    );\n    this.sunset = roundedMinute(sunsetTime, calculationParameters.rounding);\n    this.maghrib = roundedMinute(\n      dateByAddingMinutes(maghribTime, maghribAdjustment),\n      calculationParameters.rounding,\n    );\n    this.isha = roundedMinute(\n      dateByAddingMinutes(ishaTime, ishaAdjustment),\n      calculationParameters.rounding,\n    );\n  }\n\n  timeForPrayer(prayer: ValueOf<typeof Prayer>) {\n    if (prayer === Prayer.Fajr) {\n      return this.fajr;\n    } else if (prayer === Prayer.Sunrise) {\n      return this.sunrise;\n    } else if (prayer === Prayer.Dhuhr) {\n      return this.dhuhr;\n    } else if (prayer === Prayer.Asr) {\n      return this.asr;\n    } else if (prayer === Prayer.Maghrib) {\n      return this.maghrib;\n    } else if (prayer === Prayer.Isha) {\n      return this.isha;\n    } else {\n      return null;\n    }\n  }\n\n  currentPrayer(date = new Date()) {\n    if (date >= this.isha) {\n      return Prayer.Isha;\n    } else if (date >= this.maghrib) {\n      return Prayer.Maghrib;\n    } else if (date >= this.asr) {\n      return Prayer.Asr;\n    } else if (date >= this.dhuhr) {\n      return Prayer.Dhuhr;\n    } else if (date >= this.sunrise) {\n      return Prayer.Sunrise;\n    } else if (date >= this.fajr) {\n      return Prayer.Fajr;\n    } else {\n      return Prayer.None;\n    }\n  }\n\n  nextPrayer(date = new Date()) {\n    if (date >= this.isha) {\n      return Prayer.None;\n    } else if (date >= this.maghrib) {\n      return Prayer.Isha;\n    } else if (date >= this.asr) {\n      return Prayer.Maghrib;\n    } else if (date >= this.dhuhr) {\n      return Prayer.Asr;\n    } else if (date >= this.sunrise) {\n      return Prayer.Dhuhr;\n    } else if (date >= this.fajr) {\n      return Prayer.Sunrise;\n    } else {\n      return Prayer.Fajr;\n    }\n  }\n}\n","import Coordinates from './Coordinates';\nimport { degreesToRadians, radiansToDegrees, unwindAngle } from './MathUtils';\n\nexport default function qibla(coordinates: Coordinates) {\n  const makkah = new Coordinates(21.4225241, 39.8261818);\n\n  // Equation from \"Spherical Trigonometry For the use of colleges and schools\" page 50\n  const term1 = Math.sin(\n    degreesToRadians(makkah.longitude) -\n      degreesToRadians(coordinates.longitude),\n  );\n  const term2 =\n    Math.cos(degreesToRadians(coordinates.latitude)) *\n    Math.tan(degreesToRadians(makkah.latitude));\n  const term3 =\n    Math.sin(degreesToRadians(coordinates.latitude)) *\n    Math.cos(\n      degreesToRadians(makkah.longitude) -\n        degreesToRadians(coordinates.longitude),\n    );\n  const angle = Math.atan2(term1, term2 - term3);\n\n  return unwindAngle(radiansToDegrees(angle));\n}\n","import {\n  dateByAddingDays,\n  dateByAddingSeconds,\n  roundedMinute,\n} from './DateUtils';\nimport PrayerTimes from './PrayerTimes';\n\nexport default class SunnahTimes {\n  middleOfTheNight: Date;\n  lastThirdOfTheNight: Date;\n\n  constructor(prayerTimes: PrayerTimes) {\n    const date = prayerTimes.date;\n    const nextDay = dateByAddingDays(date, 1);\n    const nextDayPrayerTimes = new PrayerTimes(\n      prayerTimes.coordinates,\n      nextDay,\n      prayerTimes.calculationParameters,\n    );\n\n    const nightDuration =\n      (nextDayPrayerTimes.fajr.getTime() - prayerTimes.maghrib.getTime()) /\n      1000.0;\n\n    this.middleOfTheNight = roundedMinute(\n      dateByAddingSeconds(prayerTimes.maghrib, nightDuration / 2),\n    );\n    this.lastThirdOfTheNight = roundedMinute(\n      dateByAddingSeconds(prayerTimes.maghrib, nightDuration * (2 / 3)),\n    );\n  }\n}\n"],"names":["Madhab","Shafi","Hanafi","HighLatitudeRule","MiddleOfTheNight","SeventhOfTheNight","TwilightAngle","recommended","coordinates","latitude","Coordinates","_createClass","longitude","_classCallCheck","this","Rounding","Nearest","Up","None","dateByAddingDays","date","days","year","getFullYear","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","Date","dateByAddingMinutes","dateByAddingSeconds","getTime","roundedMinute","rounding","arguments","length","undefined","getUTCSeconds","offset","dayOfYear","returnedDayOfYear","months","Astronomical","isLeapYear","i","isValidDate","isNaN","valueOf","degreesToRadians","degrees","Math","PI","radiansToDegrees","radians","normalizeToScale","num","max","floor","unwindAngle","angle","Shafaq","General","Ahmer","Abyad","meanSolarLongitude","julianCentury","T","pow","meanLunarLongitude","ascendingLunarNodeLongitude","meanSolarAnomaly","solarEquationOfTheCenter","meanAnomaly","Mrad","sin","apparentSolarLongitude","meanLongitude","Omega","meanObliquityOfTheEcliptic","apparentObliquityOfTheEcliptic","O","Epsilon0","cos","meanSiderealTime","nutationInLongitude","solarLongitude","lunarLongitude","ascendingNode","L0","Lp","nutationInObliquity","altitudeOfCelestialBody","observerLatitude","declination","localHourAngle","Phi","delta","H","term1","term2","asin","approximateTransit","siderealTime","rightAscension","correctedTransit","previousRightAscension","nextRightAscension","m0","a2","a1","a3","Lw","Theta","a","interpolateAngles","round","correctedHourAngle","afterTransit","previousDeclination","nextDeclination","h0","Theta0","d2","d1","d3","H0","acos","m","interpolate","y2","y1","y3","n","b","julianDay","trunc","Y","M","D","A","B","i0","i1","seasonAdjustedMorningTwilight","sunrise","dyy","abs","c","d","adjustment","daysSinceSolstice","seasonAdjustedEveningTwilight","sunset","shafaq","southernOffset","daysInYear","SolarCoordinates","Lambda","dPsi","dEpsilon","EpsilonApparent","atan2","apparentSiderealTime","SolarTime","observer","solar","prevSolar","nextSolar","solarAltitude","approxTransit","transit","value","shadowLength","tangent","inverse","tan","atan","hourAngle","PolarCircleResolution","AqrabBalad","AqrabYaum","Unresolved","isValidSolarTime","solarTime","aqrabYaumResolver","daysAdded","direction","ceil","testDate","setDate","tomorrow","tomorrowSolarTime","aqrabBaladResolver","sign","polarCircleResolvedValues","resolver","defaultReturn","CalculationParameters","method","fajrAngle","ishaAngle","ishaInterval","maghribAngle","_defineProperty","fajr","dhuhr","asr","maghrib","isha","highLatitudeRule","concat","CalculationMethod","MuslimWorldLeague","params","methodAdjustments","Egyptian","Karachi","UmmAlQura","Dubai","MoonsightingCommittee","NorthAmerica","Kuwait","Qatar","Singapore","Tehran","Turkey","Other","Prayer","Fajr","Sunrise","Dhuhr","Asr","Maghrib","Isha","TimeComponents","UTC","PrayerTimes","calculationParameters","fajrTime","sunriseTime","dhuhrTime","asrTime","sunsetTime","maghribTime","ishaTime","utcDate","polarCircleResolver","polarCircleResolution","_TimeComponents","_TimeComponents2","_TimeComponents3","resolved","dateComponents","afternoon","madhab","tomorrowSunrise","night","Number","safeFajr","portion","nightPortions","safeIsha","angleBasedMaghrib","fajrAdjustment","adjustments","sunriseAdjustment","dhuhrAdjustment","asrAdjustment","maghribAdjustment","ishaAdjustment","prayer","qibla","makkah","term3","SunnahTimes","prayerTimes","nextDay","nightDuration","middleOfTheNight","lastThirdOfTheNight"],"mappings":"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"}