{"version":3,"sources":["../../src/Astronomical.ts"],"names":["Astronomical","meanSolarLongitude","julianCentury","T","term1","term2","term3","Math","pow","L0","meanLunarLongitude","Lp","ascendingLunarNodeLongitude","term4","Omega","meanSolarAnomaly","M","solarEquationOfTheCenter","meanAnomaly","Mrad","sin","apparentSolarLongitude","meanLongitude","longitude","Lambda","meanObliquityOfTheEcliptic","apparentObliquityOfTheEcliptic","Epsilon0","O","cos","meanSiderealTime","JD","Theta","nutationInLongitude","solarLongitude","lunarLongitude","ascendingNode","nutationInObliquity","altitudeOfCelestialBody","observerLatitude","declination","localHourAngle","Phi","delta","H","asin","approximateTransit","siderealTime","rightAscension","L","Theta0","a2","Lw","correctedTransit","previousRightAscension","nextRightAscension","m0","a1","a3","a","interpolateAngles","dm","correctedHourAngle","angle","coordinates","afterTransit","previousDeclination","nextDeclination","h0","d2","d1","d3","latitude","H0","acos","m","interpolate","h","y2","y1","y3","n","b","c","julianDay","year","month","day","hours","trunc","Y","D","A","B","i0","i1","isLeapYear","seasonAdjustedMorningTwilight","dayOfYear","sunrise","abs","d","adjustment","dyy","daysSinceSolstice","round","seasonAdjustedEveningTwilight","sunset","shafaq","Shafaq","Ahmer","Abyad","northernOffset","southernOffset","daysInYear"],"mappings":"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","sourcesContent":["/* eslint-disable max-params, max-lines */\nimport Coordinates from './Coordinates';\nimport { dateByAddingSeconds } from './DateUtils';\nimport {\n  degreesToRadians,\n  normalizeToScale,\n  quadrantShiftAngle,\n  radiansToDegrees,\n  unwindAngle,\n} from './MathUtils';\nimport { Shafaq } from './Shafaq';\nimport { ValueOf } from './TypeUtils';\n\nconst Astronomical = {\n  /* The geometric mean longitude of the sun in degrees. */\n  meanSolarLongitude(julianCentury: number) {\n    const T = julianCentury;\n    /* Equation from Astronomical Algorithms page 163 */\n    const term1 = 280.4664567;\n    const term2 = 36000.76983 * T;\n    const term3 = 0.0003032 * Math.pow(T, 2);\n    const L0 = term1 + term2 + term3;\n    return unwindAngle(L0);\n  },\n\n  /* The geometric mean longitude of the moon in degrees. */\n  meanLunarLongitude(julianCentury: number) {\n    const T = julianCentury;\n    /* Equation from Astronomical Algorithms page 144 */\n    const term1 = 218.3165;\n    const term2 = 481267.8813 * T;\n    const Lp = term1 + term2;\n    return unwindAngle(Lp);\n  },\n\n  ascendingLunarNodeLongitude(julianCentury: number) {\n    const T = julianCentury;\n    /* Equation from Astronomical Algorithms page 144 */\n    const term1 = 125.04452;\n    const term2 = 1934.136261 * T;\n    const term3 = 0.0020708 * Math.pow(T, 2);\n    const term4 = Math.pow(T, 3) / 450000;\n    const Omega = term1 - term2 + term3 + term4;\n    return unwindAngle(Omega);\n  },\n\n  /* The mean anomaly of the sun. */\n  meanSolarAnomaly(julianCentury: number) {\n    const T = julianCentury;\n    /* Equation from Astronomical Algorithms page 163 */\n    const term1 = 357.52911;\n    const term2 = 35999.05029 * T;\n    const term3 = 0.0001537 * Math.pow(T, 2);\n    const M = term1 + term2 - term3;\n    return unwindAngle(M);\n  },\n\n  /* The Sun's equation of the center in degrees. */\n  solarEquationOfTheCenter(julianCentury: number, meanAnomaly: number) {\n    const T = julianCentury;\n    /* Equation from Astronomical Algorithms page 164 */\n    const Mrad = degreesToRadians(meanAnomaly);\n    const term1 =\n      (1.914602 - 0.004817 * T - 0.000014 * Math.pow(T, 2)) * Math.sin(Mrad);\n    const term2 = (0.019993 - 0.000101 * T) * Math.sin(2 * Mrad);\n    const term3 = 0.000289 * Math.sin(3 * Mrad);\n    return term1 + term2 + term3;\n  },\n\n  /* The apparent longitude of the Sun, referred to the\n        true equinox of the date. */\n  apparentSolarLongitude(julianCentury: number, meanLongitude: number) {\n    const T = julianCentury;\n    const L0 = meanLongitude;\n    /* Equation from Astronomical Algorithms page 164 */\n    const longitude =\n      L0 +\n      Astronomical.solarEquationOfTheCenter(\n        T,\n        Astronomical.meanSolarAnomaly(T),\n      );\n    const Omega = 125.04 - 1934.136 * T;\n    const Lambda =\n      longitude - 0.00569 - 0.00478 * Math.sin(degreesToRadians(Omega));\n    return unwindAngle(Lambda);\n  },\n\n  /* The mean obliquity of the ecliptic, formula\n        adopted by the International Astronomical Union.\n        Represented in degrees. */\n  meanObliquityOfTheEcliptic(julianCentury: number) {\n    const T = julianCentury;\n    /* Equation from Astronomical Algorithms page 147 */\n    const term1 = 23.439291;\n    const term2 = 0.013004167 * T;\n    const term3 = 0.0000001639 * Math.pow(T, 2);\n    const term4 = 0.0000005036 * Math.pow(T, 3);\n    return term1 - term2 - term3 + term4;\n  },\n\n  /* The mean obliquity of the ecliptic, corrected for\n        calculating the apparent position of the sun, in degrees. */\n  apparentObliquityOfTheEcliptic(\n    julianCentury: number,\n    meanObliquityOfTheEcliptic: number,\n  ) {\n    const T = julianCentury;\n    const Epsilon0 = meanObliquityOfTheEcliptic;\n    /* Equation from Astronomical Algorithms page 165 */\n    const O = 125.04 - 1934.136 * T;\n    return Epsilon0 + 0.00256 * Math.cos(degreesToRadians(O));\n  },\n\n  /* Mean sidereal time, the hour angle of the vernal equinox, in degrees. */\n  meanSiderealTime(julianCentury: number) {\n    const T = julianCentury;\n    /* Equation from Astronomical Algorithms page 165 */\n    const JD = T * 36525 + 2451545.0;\n    const term1 = 280.46061837;\n    const term2 = 360.98564736629 * (JD - 2451545);\n    const term3 = 0.000387933 * Math.pow(T, 2);\n    const term4 = Math.pow(T, 3) / 38710000;\n    const Theta = term1 + term2 + term3 - term4;\n    return unwindAngle(Theta);\n  },\n\n  nutationInLongitude(\n    julianCentury: number,\n    solarLongitude: number,\n    lunarLongitude: number,\n    ascendingNode: number,\n  ) {\n    const L0 = solarLongitude;\n    const Lp = lunarLongitude;\n    const Omega = ascendingNode;\n    /* Equation from Astronomical Algorithms page 144 */\n    const term1 = (-17.2 / 3600) * Math.sin(degreesToRadians(Omega));\n    const term2 = (1.32 / 3600) * Math.sin(2 * degreesToRadians(L0));\n    const term3 = (0.23 / 3600) * Math.sin(2 * degreesToRadians(Lp));\n    const term4 = (0.21 / 3600) * Math.sin(2 * degreesToRadians(Omega));\n    return term1 - term2 - term3 + term4;\n  },\n\n  nutationInObliquity(\n    julianCentury: number,\n    solarLongitude: number,\n    lunarLongitude: number,\n    ascendingNode: number,\n  ) {\n    const L0 = solarLongitude;\n    const Lp = lunarLongitude;\n    const Omega = ascendingNode;\n    /* Equation from Astronomical Algorithms page 144 */\n    const term1 = (9.2 / 3600) * Math.cos(degreesToRadians(Omega));\n    const term2 = (0.57 / 3600) * Math.cos(2 * degreesToRadians(L0));\n    const term3 = (0.1 / 3600) * Math.cos(2 * degreesToRadians(Lp));\n    const term4 = (0.09 / 3600) * Math.cos(2 * degreesToRadians(Omega));\n    return term1 + term2 + term3 - term4;\n  },\n\n  altitudeOfCelestialBody(\n    observerLatitude: number,\n    declination: number,\n    localHourAngle: number,\n  ) {\n    const Phi = observerLatitude;\n    const delta = declination;\n    const H = localHourAngle;\n    /* Equation from Astronomical Algorithms page 93 */\n    const term1 =\n      Math.sin(degreesToRadians(Phi)) * Math.sin(degreesToRadians(delta));\n    const term2 =\n      Math.cos(degreesToRadians(Phi)) *\n      Math.cos(degreesToRadians(delta)) *\n      Math.cos(degreesToRadians(H));\n    return radiansToDegrees(Math.asin(term1 + term2));\n  },\n\n  approximateTransit(\n    longitude: number,\n    siderealTime: number,\n    rightAscension: number,\n  ) {\n    const L = longitude;\n    const Theta0 = siderealTime;\n    const a2 = rightAscension;\n    /* Equation from page Astronomical Algorithms 102 */\n    const Lw = L * -1;\n    return normalizeToScale((a2 + Lw - Theta0) / 360, 1);\n  },\n\n  /* The time at which the sun is at its highest point in the sky (in universal time) */\n  correctedTransit(\n    approximateTransit: number,\n    longitude: number,\n    siderealTime: number,\n    rightAscension: number,\n    previousRightAscension: number,\n    nextRightAscension: number,\n  ) {\n    const m0 = approximateTransit;\n    const L = longitude;\n    const Theta0 = siderealTime;\n    const a2 = rightAscension;\n    const a1 = previousRightAscension;\n    const a3 = nextRightAscension;\n    /* Equation from page Astronomical Algorithms 102 */\n    const Lw = L * -1;\n    const Theta = unwindAngle(Theta0 + 360.985647 * m0);\n    const a = unwindAngle(Astronomical.interpolateAngles(a2, a1, a3, m0));\n    const H = quadrantShiftAngle(Theta - Lw - a);\n    const dm = H / -360;\n    return (m0 + dm) * 24;\n  },\n\n  correctedHourAngle(\n    approximateTransit: number,\n    angle: number,\n    coordinates: Coordinates,\n    afterTransit: boolean,\n    siderealTime: number,\n    rightAscension: number,\n    previousRightAscension: number,\n    nextRightAscension: number,\n    declination: number,\n    previousDeclination: number,\n    nextDeclination: number,\n  ) {\n    const m0 = approximateTransit;\n    const h0 = angle;\n    const Theta0 = siderealTime;\n    const a2 = rightAscension;\n    const a1 = previousRightAscension;\n    const a3 = nextRightAscension;\n    const d2 = declination;\n    const d1 = previousDeclination;\n    const d3 = nextDeclination;\n\n    /* Equation from page Astronomical Algorithms 102 */\n    const Lw = coordinates.longitude * -1;\n    const term1 =\n      Math.sin(degreesToRadians(h0)) -\n      Math.sin(degreesToRadians(coordinates.latitude)) *\n        Math.sin(degreesToRadians(d2));\n    const term2 =\n      Math.cos(degreesToRadians(coordinates.latitude)) *\n      Math.cos(degreesToRadians(d2));\n    const H0 = radiansToDegrees(Math.acos(term1 / term2));\n    const m = afterTransit ? m0 + H0 / 360 : m0 - H0 / 360;\n    const Theta = unwindAngle(Theta0 + 360.985647 * m);\n    const a = unwindAngle(Astronomical.interpolateAngles(a2, a1, a3, m));\n    const delta = Astronomical.interpolate(d2, d1, d3, m);\n    const H = Theta - Lw - a;\n    const h = Astronomical.altitudeOfCelestialBody(\n      coordinates.latitude,\n      delta,\n      H,\n    );\n    const term3 = h - h0;\n    const term4 =\n      360 *\n      Math.cos(degreesToRadians(delta)) *\n      Math.cos(degreesToRadians(coordinates.latitude)) *\n      Math.sin(degreesToRadians(H));\n    const dm = term3 / term4;\n    return (m + dm) * 24;\n  },\n\n  /* Interpolation of a value given equidistant\n        previous and next values and a factor\n        equal to the fraction of the interpolated\n        point's time over the time between values. */\n  interpolate(y2: number, y1: number, y3: number, n: number) {\n    /* Equation from Astronomical Algorithms page 24 */\n    const a = y2 - y1;\n    const b = y3 - y2;\n    const c = b - a;\n    return y2 + (n / 2) * (a + b + n * c);\n  },\n\n  /* Interpolation of three angles, accounting for\n        angle unwinding. */\n  interpolateAngles(y2: number, y1: number, y3: number, n: number) {\n    /* Equation from Astronomical Algorithms page 24 */\n    const a = unwindAngle(y2 - y1);\n    const b = unwindAngle(y3 - y2);\n    const c = b - a;\n    return y2 + (n / 2) * (a + b + n * c);\n  },\n\n  /* The Julian Day for the given Gregorian date components. */\n  julianDay(year: number, month: number, day: number, hours = 0) {\n    /* Equation from Astronomical Algorithms page 60 */\n\n    const trunc = Math.trunc;\n\n    const Y = trunc(month > 2 ? year : year - 1);\n    const M = trunc(month > 2 ? month : month + 12);\n    const D = day + hours / 24;\n\n    const A = trunc(Y / 100);\n    const B = trunc(2 - A + trunc(A / 4));\n\n    const i0 = trunc(365.25 * (Y + 4716));\n    const i1 = trunc(30.6001 * (M + 1));\n\n    return i0 + i1 + D + B - 1524.5;\n  },\n\n  /* Julian century from the epoch. */\n  julianCentury(julianDay: number) {\n    /* Equation from Astronomical Algorithms page 163 */\n    return (julianDay - 2451545.0) / 36525;\n  },\n\n  /* Whether or not a year is a leap year (has 366 days). */\n  isLeapYear(year: number) {\n    if (year % 4 !== 0) {\n      return false;\n    }\n\n    if (year % 100 === 0 && year % 400 !== 0) {\n      return false;\n    }\n\n    return true;\n  },\n\n  seasonAdjustedMorningTwilight(\n    latitude: number,\n    dayOfYear: number,\n    year: number,\n    sunrise: Date,\n  ) {\n    const a = 75 + (28.65 / 55.0) * Math.abs(latitude);\n    const b = 75 + (19.44 / 55.0) * Math.abs(latitude);\n    const c = 75 + (32.74 / 55.0) * Math.abs(latitude);\n    const d = 75 + (48.1 / 55.0) * Math.abs(latitude);\n\n    const adjustment = (function () {\n      const dyy = Astronomical.daysSinceSolstice(dayOfYear, year, latitude);\n      if (dyy < 91) {\n        return a + ((b - a) / 91.0) * dyy;\n      } else if (dyy < 137) {\n        return b + ((c - b) / 46.0) * (dyy - 91);\n      } else if (dyy < 183) {\n        return c + ((d - c) / 46.0) * (dyy - 137);\n      } else if (dyy < 229) {\n        return d + ((c - d) / 46.0) * (dyy - 183);\n      } else if (dyy < 275) {\n        return c + ((b - c) / 46.0) * (dyy - 229);\n      } else {\n        return b + ((a - b) / 91.0) * (dyy - 275);\n      }\n    })();\n\n    return dateByAddingSeconds(sunrise, Math.round(adjustment * -60.0));\n  },\n\n  seasonAdjustedEveningTwilight(\n    latitude: number,\n    dayOfYear: number,\n    year: number,\n    sunset: Date,\n    shafaq: ValueOf<typeof Shafaq>,\n  ) {\n    let a, b, c, d;\n    if (shafaq === Shafaq.Ahmer) {\n      a = 62 + (17.4 / 55.0) * Math.abs(latitude);\n      b = 62 - (7.16 / 55.0) * Math.abs(latitude);\n      c = 62 + (5.12 / 55.0) * Math.abs(latitude);\n      d = 62 + (19.44 / 55.0) * Math.abs(latitude);\n    } else if (shafaq === Shafaq.Abyad) {\n      a = 75 + (25.6 / 55.0) * Math.abs(latitude);\n      b = 75 + (7.16 / 55.0) * Math.abs(latitude);\n      c = 75 + (36.84 / 55.0) * Math.abs(latitude);\n      d = 75 + (81.84 / 55.0) * Math.abs(latitude);\n    } else {\n      a = 75 + (25.6 / 55.0) * Math.abs(latitude);\n      b = 75 + (2.05 / 55.0) * Math.abs(latitude);\n      c = 75 - (9.21 / 55.0) * Math.abs(latitude);\n      d = 75 + (6.14 / 55.0) * Math.abs(latitude);\n    }\n\n    const adjustment = (function () {\n      const dyy = Astronomical.daysSinceSolstice(dayOfYear, year, latitude);\n      if (dyy < 91) {\n        return a + ((b - a) / 91.0) * dyy;\n      } else if (dyy < 137) {\n        return b + ((c - b) / 46.0) * (dyy - 91);\n      } else if (dyy < 183) {\n        return c + ((d - c) / 46.0) * (dyy - 137);\n      } else if (dyy < 229) {\n        return d + ((c - d) / 46.0) * (dyy - 183);\n      } else if (dyy < 275) {\n        return c + ((b - c) / 46.0) * (dyy - 229);\n      } else {\n        return b + ((a - b) / 91.0) * (dyy - 275);\n      }\n    })();\n\n    return dateByAddingSeconds(sunset, Math.round(adjustment * 60.0));\n  },\n\n  daysSinceSolstice(dayOfYear: number, year: number, latitude: number) {\n    let daysSinceSolstice = 0;\n    const northernOffset = 10;\n    const southernOffset = Astronomical.isLeapYear(year) ? 173 : 172;\n    const daysInYear = Astronomical.isLeapYear(year) ? 366 : 365;\n\n    if (latitude >= 0) {\n      daysSinceSolstice = dayOfYear + northernOffset;\n      if (daysSinceSolstice >= daysInYear) {\n        daysSinceSolstice = daysSinceSolstice - daysInYear;\n      }\n    } else {\n      daysSinceSolstice = dayOfYear - southernOffset;\n      if (daysSinceSolstice < 0) {\n        daysSinceSolstice = daysSinceSolstice + daysInYear;\n      }\n    }\n\n    return daysSinceSolstice;\n  },\n};\n\nexport default Astronomical;\n"],"file":"Astronomical.js"}