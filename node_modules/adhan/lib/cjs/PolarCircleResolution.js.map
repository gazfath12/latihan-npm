{"version":3,"sources":["../../src/PolarCircleResolution.ts"],"names":["PolarCircleResolution","AqrabBalad","AqrabYaum","Unresolved","LATITUDE_VARIATION_STEP","UNSAFE_LATITUDE","isValidSolarTime","solarTime","isNaN","sunrise","sunset","aqrabYaumResolver","coordinates","date","daysAdded","direction","Math","ceil","testDate","Date","getTime","setDate","getDate","tomorrow","SolarTime","tomorrowSolarTime","aqrabBaladResolver","latitude","abs","sign","Coordinates","longitude","polarCircleResolvedValues","resolver","defaultReturn"],"mappings":"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","sourcesContent":["import Coordinates from './Coordinates';\nimport SolarTime from './SolarTime';\nimport { dateByAddingDays } from './DateUtils';\nimport { ValueOf } from './TypeUtils';\n\nexport const PolarCircleResolution = {\n  AqrabBalad: 'AqrabBalad',\n  AqrabYaum: 'AqrabYaum',\n  Unresolved: 'Unresolved',\n} as const;\n\nconst LATITUDE_VARIATION_STEP = 0.5; // Degrees to add/remove at each resolution step\nconst UNSAFE_LATITUDE = 65; // Based on https://en.wikipedia.org/wiki/Midnight_sun\n\nconst isValidSolarTime = (solarTime: SolarTime) =>\n  !isNaN(solarTime.sunrise) && !isNaN(solarTime.sunset);\n\nconst aqrabYaumResolver = (\n  coordinates: Coordinates,\n  date: Date,\n  daysAdded = 1,\n  direction = 1,\n): {\n  date: Date;\n  tomorrow: Date;\n  coordinates: Coordinates;\n  solarTime: SolarTime;\n  tomorrowSolarTime: SolarTime;\n} | null => {\n  if (daysAdded > Math.ceil(365 / 2)) {\n    return null;\n  }\n  const testDate = new Date(date.getTime());\n  testDate.setDate(testDate.getDate() + direction * daysAdded);\n  const tomorrow = dateByAddingDays(testDate, 1);\n  const solarTime = new SolarTime(testDate, coordinates);\n  const tomorrowSolarTime = new SolarTime(tomorrow, coordinates);\n\n  if (!isValidSolarTime(solarTime) || !isValidSolarTime(tomorrowSolarTime)) {\n    return aqrabYaumResolver(\n      coordinates,\n      date,\n      daysAdded + (direction > 0 ? 0 : 1),\n      -direction,\n    );\n  }\n\n  return {\n    date,\n    tomorrow,\n    coordinates,\n    solarTime,\n    tomorrowSolarTime,\n  };\n};\n\nconst aqrabBaladResolver = (\n  coordinates: Coordinates,\n  date: Date,\n  latitude: number,\n): {\n  date: Date;\n  tomorrow: Date;\n  coordinates: Coordinates;\n  solarTime: SolarTime;\n  tomorrowSolarTime: SolarTime;\n} | null => {\n  const solarTime = new SolarTime(date, { ...coordinates, latitude });\n  const tomorrow = dateByAddingDays(date, 1);\n  const tomorrowSolarTime = new SolarTime(tomorrow, {\n    ...coordinates,\n    latitude,\n  });\n  if (!isValidSolarTime(solarTime) || !isValidSolarTime(tomorrowSolarTime)) {\n    return Math.abs(latitude) >= UNSAFE_LATITUDE\n      ? aqrabBaladResolver(\n          coordinates,\n          date,\n          latitude - Math.sign(latitude) * LATITUDE_VARIATION_STEP,\n        )\n      : null;\n  }\n\n  return {\n    date,\n    tomorrow,\n    coordinates: new Coordinates(latitude, coordinates.longitude),\n    solarTime,\n    tomorrowSolarTime,\n  };\n};\n\nexport const polarCircleResolvedValues = (\n  resolver: ValueOf<typeof PolarCircleResolution>,\n  date: Date,\n  coordinates: Coordinates,\n) => {\n  const defaultReturn = {\n    date,\n    tomorrow: dateByAddingDays(date, 1),\n    coordinates,\n    solarTime: new SolarTime(date, coordinates),\n    tomorrowSolarTime: new SolarTime(dateByAddingDays(date, 1), coordinates),\n  };\n\n  switch (resolver) {\n    case PolarCircleResolution.AqrabYaum: {\n      return aqrabYaumResolver(coordinates, date) || defaultReturn;\n    }\n    case PolarCircleResolution.AqrabBalad: {\n      const { latitude } = coordinates;\n      return (\n        aqrabBaladResolver(\n          coordinates,\n          date,\n          latitude - Math.sign(latitude) * LATITUDE_VARIATION_STEP,\n        ) || defaultReturn\n      );\n    }\n    default: {\n      return defaultReturn;\n    }\n  }\n};\n"],"file":"PolarCircleResolution.js"}