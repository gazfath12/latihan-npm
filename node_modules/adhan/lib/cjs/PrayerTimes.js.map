{"version":3,"sources":["../../src/PrayerTimes.ts"],"names":["PrayerTimes","coordinates","date","calculationParameters","solarTime","SolarTime","fajrTime","sunriseTime","dhuhrTime","asrTime","sunsetTime","maghribTime","ishaTime","nightFraction","TimeComponents","transit","utcDate","getFullYear","getMonth","getDate","sunrise","sunset","tomorrow","tomorrowSolarTime","polarCircleResolver","polarCircleResolution","isNaN","PolarCircleResolution","Unresolved","resolved","dateComponents","afternoon","madhab","tomorrowSunrise","night","Number","hourAngle","fajrAngle","method","latitude","safeFajr","Astronomical","seasonAdjustedMorningTwilight","portion","nightPortions","fajr","getTime","ishaInterval","ishaAngle","safeIsha","seasonAdjustedEveningTwilight","shafaq","isha","maghribAngle","angleBasedMaghrib","fajrAdjustment","adjustments","methodAdjustments","sunriseAdjustment","dhuhrAdjustment","dhuhr","asrAdjustment","asr","maghribAdjustment","maghrib","ishaAdjustment","rounding","prayer","Prayer","Fajr","Sunrise","Dhuhr","Asr","Maghrib","Isha","Date","None"],"mappings":"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","sourcesContent":["import SolarTime from './SolarTime';\nimport TimeComponents from './TimeComponents';\nimport Prayer from './Prayer';\nimport Astronomical from './Astronomical';\nimport CalculationParameters from './CalculationParameters';\nimport Coordinates from './Coordinates';\nimport {\n  dateByAddingDays,\n  dateByAddingMinutes,\n  dateByAddingSeconds,\n  dayOfYear,\n  isValidDate,\n  roundedMinute,\n} from './DateUtils';\nimport { shadowLength } from './Madhab';\nimport {\n  PolarCircleResolution,\n  polarCircleResolvedValues,\n} from './PolarCircleResolution';\nimport { ValueOf } from './TypeUtils';\n\nexport default class PrayerTimes {\n  fajr: Date;\n  sunrise: Date;\n  dhuhr: Date;\n  asr: Date;\n  sunset: Date;\n  maghrib: Date;\n  isha: Date;\n\n  // eslint-disable-next-line complexity\n  constructor(\n    public coordinates: Coordinates,\n    public date: Date,\n    public calculationParameters: CalculationParameters,\n  ) {\n    let solarTime = new SolarTime(date, coordinates);\n\n    let fajrTime: Date;\n    let sunriseTime: Date;\n    let dhuhrTime: Date;\n    let asrTime: Date;\n    let sunsetTime: Date;\n    let maghribTime: Date;\n    let ishaTime: Date;\n\n    let nightFraction;\n\n    dhuhrTime = new TimeComponents(solarTime.transit).utcDate(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate(),\n    );\n    sunriseTime = new TimeComponents(solarTime.sunrise).utcDate(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate(),\n    );\n    sunsetTime = new TimeComponents(solarTime.sunset).utcDate(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate(),\n    );\n    const tomorrow = dateByAddingDays(date, 1);\n    let tomorrowSolarTime = new SolarTime(tomorrow, coordinates);\n\n    const polarCircleResolver = calculationParameters.polarCircleResolution;\n    if (\n      (!isValidDate(sunriseTime) ||\n        !isValidDate(sunsetTime) ||\n        isNaN(tomorrowSolarTime.sunrise)) &&\n      polarCircleResolver !== PolarCircleResolution.Unresolved\n    ) {\n      const resolved = polarCircleResolvedValues(\n        polarCircleResolver,\n        date,\n        coordinates,\n      );\n      solarTime = resolved.solarTime;\n      tomorrowSolarTime = resolved.tomorrowSolarTime;\n      const dateComponents = [\n        date.getFullYear(),\n        date.getMonth(),\n        date.getDate(),\n      ] as const;\n\n      dhuhrTime = new TimeComponents(solarTime.transit).utcDate(\n        ...dateComponents,\n      );\n      sunriseTime = new TimeComponents(solarTime.sunrise).utcDate(\n        ...dateComponents,\n      );\n      sunsetTime = new TimeComponents(solarTime.sunset).utcDate(\n        ...dateComponents,\n      );\n    }\n\n    // eslint-disable-next-line prefer-const\n    asrTime = new TimeComponents(\n      solarTime.afternoon(shadowLength(calculationParameters.madhab)),\n    ).utcDate(date.getFullYear(), date.getMonth(), date.getDate());\n\n    const tomorrowSunrise = new TimeComponents(\n      tomorrowSolarTime.sunrise,\n    ).utcDate(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate());\n    const night = (Number(tomorrowSunrise) - Number(sunsetTime)) / 1000;\n\n    fajrTime = new TimeComponents(\n      solarTime.hourAngle(-1 * calculationParameters.fajrAngle, false),\n    ).utcDate(date.getFullYear(), date.getMonth(), date.getDate());\n\n    // special case for moonsighting committee above latitude 55\n    if (\n      calculationParameters.method === 'MoonsightingCommittee' &&\n      coordinates.latitude >= 55\n    ) {\n      nightFraction = night / 7;\n      fajrTime = dateByAddingSeconds(sunriseTime, -nightFraction);\n    }\n\n    const safeFajr = (function () {\n      if (calculationParameters.method === 'MoonsightingCommittee') {\n        return Astronomical.seasonAdjustedMorningTwilight(\n          coordinates.latitude,\n          dayOfYear(date),\n          date.getFullYear(),\n          sunriseTime,\n        );\n      } else {\n        const portion = calculationParameters.nightPortions().fajr;\n        nightFraction = portion * night;\n        return dateByAddingSeconds(sunriseTime, -nightFraction);\n      }\n    })();\n\n    if (isNaN(fajrTime.getTime()) || safeFajr > fajrTime) {\n      fajrTime = safeFajr;\n    }\n\n    if (calculationParameters.ishaInterval > 0) {\n      ishaTime = dateByAddingMinutes(\n        sunsetTime,\n        calculationParameters.ishaInterval,\n      );\n    } else {\n      ishaTime = new TimeComponents(\n        solarTime.hourAngle(-1 * calculationParameters.ishaAngle, true),\n      ).utcDate(date.getFullYear(), date.getMonth(), date.getDate());\n\n      // special case for moonsighting committee above latitude 55\n      if (\n        calculationParameters.method === 'MoonsightingCommittee' &&\n        coordinates.latitude >= 55\n      ) {\n        nightFraction = night / 7;\n        ishaTime = dateByAddingSeconds(sunsetTime, nightFraction);\n      }\n\n      const safeIsha = (function () {\n        if (calculationParameters.method === 'MoonsightingCommittee') {\n          return Astronomical.seasonAdjustedEveningTwilight(\n            coordinates.latitude,\n            dayOfYear(date),\n            date.getFullYear(),\n            sunsetTime,\n            calculationParameters.shafaq,\n          );\n        } else {\n          const portion = calculationParameters.nightPortions().isha;\n          nightFraction = portion * night;\n          return dateByAddingSeconds(sunsetTime, nightFraction);\n        }\n      })();\n\n      if (isNaN(ishaTime.getTime()) || safeIsha < ishaTime) {\n        ishaTime = safeIsha;\n      }\n    }\n\n    maghribTime = sunsetTime;\n    if (calculationParameters.maghribAngle) {\n      const angleBasedMaghrib = new TimeComponents(\n        solarTime.hourAngle(-1 * calculationParameters.maghribAngle, true),\n      ).utcDate(date.getFullYear(), date.getMonth(), date.getDate());\n      if (sunsetTime < angleBasedMaghrib && ishaTime > angleBasedMaghrib) {\n        maghribTime = angleBasedMaghrib;\n      }\n    }\n\n    const fajrAdjustment =\n      (calculationParameters.adjustments.fajr || 0) +\n      (calculationParameters.methodAdjustments.fajr || 0);\n    const sunriseAdjustment =\n      (calculationParameters.adjustments.sunrise || 0) +\n      (calculationParameters.methodAdjustments.sunrise || 0);\n    const dhuhrAdjustment =\n      (calculationParameters.adjustments.dhuhr || 0) +\n      (calculationParameters.methodAdjustments.dhuhr || 0);\n    const asrAdjustment =\n      (calculationParameters.adjustments.asr || 0) +\n      (calculationParameters.methodAdjustments.asr || 0);\n    const maghribAdjustment =\n      (calculationParameters.adjustments.maghrib || 0) +\n      (calculationParameters.methodAdjustments.maghrib || 0);\n    const ishaAdjustment =\n      (calculationParameters.adjustments.isha || 0) +\n      (calculationParameters.methodAdjustments.isha || 0);\n\n    this.fajr = roundedMinute(\n      dateByAddingMinutes(fajrTime, fajrAdjustment),\n      calculationParameters.rounding,\n    );\n    this.sunrise = roundedMinute(\n      dateByAddingMinutes(sunriseTime, sunriseAdjustment),\n      calculationParameters.rounding,\n    );\n    this.dhuhr = roundedMinute(\n      dateByAddingMinutes(dhuhrTime, dhuhrAdjustment),\n      calculationParameters.rounding,\n    );\n    this.asr = roundedMinute(\n      dateByAddingMinutes(asrTime, asrAdjustment),\n      calculationParameters.rounding,\n    );\n    this.sunset = roundedMinute(sunsetTime, calculationParameters.rounding);\n    this.maghrib = roundedMinute(\n      dateByAddingMinutes(maghribTime, maghribAdjustment),\n      calculationParameters.rounding,\n    );\n    this.isha = roundedMinute(\n      dateByAddingMinutes(ishaTime, ishaAdjustment),\n      calculationParameters.rounding,\n    );\n  }\n\n  timeForPrayer(prayer: ValueOf<typeof Prayer>) {\n    if (prayer === Prayer.Fajr) {\n      return this.fajr;\n    } else if (prayer === Prayer.Sunrise) {\n      return this.sunrise;\n    } else if (prayer === Prayer.Dhuhr) {\n      return this.dhuhr;\n    } else if (prayer === Prayer.Asr) {\n      return this.asr;\n    } else if (prayer === Prayer.Maghrib) {\n      return this.maghrib;\n    } else if (prayer === Prayer.Isha) {\n      return this.isha;\n    } else {\n      return null;\n    }\n  }\n\n  currentPrayer(date = new Date()) {\n    if (date >= this.isha) {\n      return Prayer.Isha;\n    } else if (date >= this.maghrib) {\n      return Prayer.Maghrib;\n    } else if (date >= this.asr) {\n      return Prayer.Asr;\n    } else if (date >= this.dhuhr) {\n      return Prayer.Dhuhr;\n    } else if (date >= this.sunrise) {\n      return Prayer.Sunrise;\n    } else if (date >= this.fajr) {\n      return Prayer.Fajr;\n    } else {\n      return Prayer.None;\n    }\n  }\n\n  nextPrayer(date = new Date()) {\n    if (date >= this.isha) {\n      return Prayer.None;\n    } else if (date >= this.maghrib) {\n      return Prayer.Isha;\n    } else if (date >= this.asr) {\n      return Prayer.Maghrib;\n    } else if (date >= this.dhuhr) {\n      return Prayer.Asr;\n    } else if (date >= this.sunrise) {\n      return Prayer.Dhuhr;\n    } else if (date >= this.fajr) {\n      return Prayer.Sunrise;\n    } else {\n      return Prayer.Fajr;\n    }\n  }\n}\n"],"file":"PrayerTimes.js"}