{"version":3,"sources":["../../src/SolarTime.ts"],"names":["SolarTime","date","coordinates","julianDay","Astronomical","getFullYear","getMonth","getDate","observer","solar","SolarCoordinates","prevSolar","nextSolar","m0","approximateTransit","longitude","apparentSiderealTime","rightAscension","solarAltitude","approxTransit","transit","correctedTransit","sunrise","correctedHourAngle","declination","sunset","angle","afterTransit","shadowLength","tangent","Math","abs","latitude","inverse","tan","atan","hourAngle"],"mappings":"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","sourcesContent":["import Astronomical from './Astronomical';\nimport type Coordinates from './Coordinates';\nimport { degreesToRadians, radiansToDegrees } from './MathUtils';\nimport SolarCoordinates from './SolarCoordinates';\n\nexport default class SolarTime {\n  observer: Coordinates;\n  solar: SolarCoordinates;\n  prevSolar: SolarCoordinates;\n  nextSolar: SolarCoordinates;\n  approxTransit: number;\n  transit: number;\n  sunrise: number;\n  sunset: number;\n\n  constructor(date: Date, coordinates: Coordinates) {\n    const julianDay = Astronomical.julianDay(\n      date.getFullYear(),\n      date.getMonth() + 1,\n      date.getDate(),\n      0,\n    );\n\n    this.observer = coordinates;\n    this.solar = new SolarCoordinates(julianDay);\n\n    this.prevSolar = new SolarCoordinates(julianDay - 1);\n    this.nextSolar = new SolarCoordinates(julianDay + 1);\n\n    const m0 = Astronomical.approximateTransit(\n      coordinates.longitude,\n      this.solar.apparentSiderealTime,\n      this.solar.rightAscension,\n    );\n    const solarAltitude = -50.0 / 60.0;\n\n    this.approxTransit = m0;\n\n    this.transit = Astronomical.correctedTransit(\n      m0,\n      coordinates.longitude,\n      this.solar.apparentSiderealTime,\n      this.solar.rightAscension,\n      this.prevSolar.rightAscension,\n      this.nextSolar.rightAscension,\n    );\n\n    this.sunrise = Astronomical.correctedHourAngle(\n      m0,\n      solarAltitude,\n      coordinates,\n      false,\n      this.solar.apparentSiderealTime,\n      this.solar.rightAscension,\n      this.prevSolar.rightAscension,\n      this.nextSolar.rightAscension,\n      this.solar.declination,\n      this.prevSolar.declination,\n      this.nextSolar.declination,\n    );\n\n    this.sunset = Astronomical.correctedHourAngle(\n      m0,\n      solarAltitude,\n      coordinates,\n      true,\n      this.solar.apparentSiderealTime,\n      this.solar.rightAscension,\n      this.prevSolar.rightAscension,\n      this.nextSolar.rightAscension,\n      this.solar.declination,\n      this.prevSolar.declination,\n      this.nextSolar.declination,\n    );\n  }\n\n  hourAngle(angle: number, afterTransit: boolean) {\n    return Astronomical.correctedHourAngle(\n      this.approxTransit,\n      angle,\n      this.observer,\n      afterTransit,\n      this.solar.apparentSiderealTime,\n      this.solar.rightAscension,\n      this.prevSolar.rightAscension,\n      this.nextSolar.rightAscension,\n      this.solar.declination,\n      this.prevSolar.declination,\n      this.nextSolar.declination,\n    );\n  }\n\n  afternoon(shadowLength: number) {\n    // TODO source shadow angle calculation\n    const tangent = Math.abs(this.observer.latitude - this.solar.declination);\n    const inverse = shadowLength + Math.tan(degreesToRadians(tangent));\n    const angle = radiansToDegrees(Math.atan(1.0 / inverse));\n    return this.hourAngle(angle, true);\n  }\n}\n"],"file":"SolarTime.js"}