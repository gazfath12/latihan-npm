{"version":3,"sources":["../../src/PolarCircleResolution.ts"],"names":["Coordinates","SolarTime","dateByAddingDays","PolarCircleResolution","AqrabBalad","AqrabYaum","Unresolved","LATITUDE_VARIATION_STEP","UNSAFE_LATITUDE","isValidSolarTime","solarTime","isNaN","sunrise","sunset","aqrabYaumResolver","coordinates","date","daysAdded","direction","Math","ceil","testDate","Date","getTime","setDate","getDate","tomorrow","tomorrowSolarTime","aqrabBaladResolver","latitude","abs","sign","longitude","polarCircleResolvedValues","resolver","defaultReturn"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,gBAAT,QAAiC,aAAjC;AAGA,OAAO,MAAMC,qBAAqB,GAAG;AACnCC,EAAAA,UAAU,EAAE,YADuB;AAEnCC,EAAAA,SAAS,EAAE,WAFwB;AAGnCC,EAAAA,UAAU,EAAE;AAHuB,CAA9B;AAMP,MAAMC,uBAAuB,GAAG,GAAhC,C,CAAqC;;AACrC,MAAMC,eAAe,GAAG,EAAxB,C,CAA4B;;AAE5B,MAAMC,gBAAgB,GAAIC,SAAD,IACvB,CAACC,KAAK,CAACD,SAAS,CAACE,OAAX,CAAN,IAA6B,CAACD,KAAK,CAACD,SAAS,CAACG,MAAX,CADrC;;AAGA,MAAMC,iBAAiB,GAAG,CACxBC,WADwB,EAExBC,IAFwB,EAGxBC,SAAS,GAAG,CAHY,EAIxBC,SAAS,GAAG,CAJY,KAWd;AACV,MAAID,SAAS,GAAGE,IAAI,CAACC,IAAL,CAAU,MAAM,CAAhB,CAAhB,EAAoC;AAClC,WAAO,IAAP;AACD;;AACD,QAAMC,QAAQ,GAAG,IAAIC,IAAJ,CAASN,IAAI,CAACO,OAAL,EAAT,CAAjB;AACAF,EAAAA,QAAQ,CAACG,OAAT,CAAiBH,QAAQ,CAACI,OAAT,KAAqBP,SAAS,GAAGD,SAAlD;AACA,QAAMS,QAAQ,GAAGxB,gBAAgB,CAACmB,QAAD,EAAW,CAAX,CAAjC;AACA,QAAMX,SAAS,GAAG,IAAIT,SAAJ,CAAcoB,QAAd,EAAwBN,WAAxB,CAAlB;AACA,QAAMY,iBAAiB,GAAG,IAAI1B,SAAJ,CAAcyB,QAAd,EAAwBX,WAAxB,CAA1B;;AAEA,MAAI,CAACN,gBAAgB,CAACC,SAAD,CAAjB,IAAgC,CAACD,gBAAgB,CAACkB,iBAAD,CAArD,EAA0E;AACxE,WAAOb,iBAAiB,CACtBC,WADsB,EAEtBC,IAFsB,EAGtBC,SAAS,IAAIC,SAAS,GAAG,CAAZ,GAAgB,CAAhB,GAAoB,CAAxB,CAHa,EAItB,CAACA,SAJqB,CAAxB;AAMD;;AAED,SAAO;AACLF,IAAAA,IADK;AAELU,IAAAA,QAFK;AAGLX,IAAAA,WAHK;AAILL,IAAAA,SAJK;AAKLiB,IAAAA;AALK,GAAP;AAOD,CArCD;;AAuCA,MAAMC,kBAAkB,GAAG,CACzBb,WADyB,EAEzBC,IAFyB,EAGzBa,QAHyB,KAUf;AACV,QAAMnB,SAAS,GAAG,IAAIT,SAAJ,CAAce,IAAd,EAAoB,EAAE,GAAGD,WAAL;AAAkBc,IAAAA;AAAlB,GAApB,CAAlB;AACA,QAAMH,QAAQ,GAAGxB,gBAAgB,CAACc,IAAD,EAAO,CAAP,CAAjC;AACA,QAAMW,iBAAiB,GAAG,IAAI1B,SAAJ,CAAcyB,QAAd,EAAwB,EAChD,GAAGX,WAD6C;AAEhDc,IAAAA;AAFgD,GAAxB,CAA1B;;AAIA,MAAI,CAACpB,gBAAgB,CAACC,SAAD,CAAjB,IAAgC,CAACD,gBAAgB,CAACkB,iBAAD,CAArD,EAA0E;AACxE,WAAOR,IAAI,CAACW,GAAL,CAASD,QAAT,KAAsBrB,eAAtB,GACHoB,kBAAkB,CAChBb,WADgB,EAEhBC,IAFgB,EAGhBa,QAAQ,GAAGV,IAAI,CAACY,IAAL,CAAUF,QAAV,IAAsBtB,uBAHjB,CADf,GAMH,IANJ;AAOD;;AAED,SAAO;AACLS,IAAAA,IADK;AAELU,IAAAA,QAFK;AAGLX,IAAAA,WAAW,EAAE,IAAIf,WAAJ,CAAgB6B,QAAhB,EAA0Bd,WAAW,CAACiB,SAAtC,CAHR;AAILtB,IAAAA,SAJK;AAKLiB,IAAAA;AALK,GAAP;AAOD,CAlCD;;AAoCA,OAAO,MAAMM,yBAAyB,GAAG,CACvCC,QADuC,EAEvClB,IAFuC,EAGvCD,WAHuC,KAIpC;AACH,QAAMoB,aAAa,GAAG;AACpBnB,IAAAA,IADoB;AAEpBU,IAAAA,QAAQ,EAAExB,gBAAgB,CAACc,IAAD,EAAO,CAAP,CAFN;AAGpBD,IAAAA,WAHoB;AAIpBL,IAAAA,SAAS,EAAE,IAAIT,SAAJ,CAAce,IAAd,EAAoBD,WAApB,CAJS;AAKpBY,IAAAA,iBAAiB,EAAE,IAAI1B,SAAJ,CAAcC,gBAAgB,CAACc,IAAD,EAAO,CAAP,CAA9B,EAAyCD,WAAzC;AALC,GAAtB;;AAQA,UAAQmB,QAAR;AACE,SAAK/B,qBAAqB,CAACE,SAA3B;AAAsC;AACpC,eAAOS,iBAAiB,CAACC,WAAD,EAAcC,IAAd,CAAjB,IAAwCmB,aAA/C;AACD;;AACD,SAAKhC,qBAAqB,CAACC,UAA3B;AAAuC;AACrC,cAAM;AAAEyB,UAAAA;AAAF,YAAed,WAArB;AACA,eACEa,kBAAkB,CAChBb,WADgB,EAEhBC,IAFgB,EAGhBa,QAAQ,GAAGV,IAAI,CAACY,IAAL,CAAUF,QAAV,IAAsBtB,uBAHjB,CAAlB,IAIK4B,aALP;AAOD;;AACD;AAAS;AACP,eAAOA,aAAP;AACD;AAhBH;AAkBD,CA/BM","sourcesContent":["import Coordinates from './Coordinates';\nimport SolarTime from './SolarTime';\nimport { dateByAddingDays } from './DateUtils';\nimport { ValueOf } from './TypeUtils';\n\nexport const PolarCircleResolution = {\n  AqrabBalad: 'AqrabBalad',\n  AqrabYaum: 'AqrabYaum',\n  Unresolved: 'Unresolved',\n} as const;\n\nconst LATITUDE_VARIATION_STEP = 0.5; // Degrees to add/remove at each resolution step\nconst UNSAFE_LATITUDE = 65; // Based on https://en.wikipedia.org/wiki/Midnight_sun\n\nconst isValidSolarTime = (solarTime: SolarTime) =>\n  !isNaN(solarTime.sunrise) && !isNaN(solarTime.sunset);\n\nconst aqrabYaumResolver = (\n  coordinates: Coordinates,\n  date: Date,\n  daysAdded = 1,\n  direction = 1,\n): {\n  date: Date;\n  tomorrow: Date;\n  coordinates: Coordinates;\n  solarTime: SolarTime;\n  tomorrowSolarTime: SolarTime;\n} | null => {\n  if (daysAdded > Math.ceil(365 / 2)) {\n    return null;\n  }\n  const testDate = new Date(date.getTime());\n  testDate.setDate(testDate.getDate() + direction * daysAdded);\n  const tomorrow = dateByAddingDays(testDate, 1);\n  const solarTime = new SolarTime(testDate, coordinates);\n  const tomorrowSolarTime = new SolarTime(tomorrow, coordinates);\n\n  if (!isValidSolarTime(solarTime) || !isValidSolarTime(tomorrowSolarTime)) {\n    return aqrabYaumResolver(\n      coordinates,\n      date,\n      daysAdded + (direction > 0 ? 0 : 1),\n      -direction,\n    );\n  }\n\n  return {\n    date,\n    tomorrow,\n    coordinates,\n    solarTime,\n    tomorrowSolarTime,\n  };\n};\n\nconst aqrabBaladResolver = (\n  coordinates: Coordinates,\n  date: Date,\n  latitude: number,\n): {\n  date: Date;\n  tomorrow: Date;\n  coordinates: Coordinates;\n  solarTime: SolarTime;\n  tomorrowSolarTime: SolarTime;\n} | null => {\n  const solarTime = new SolarTime(date, { ...coordinates, latitude });\n  const tomorrow = dateByAddingDays(date, 1);\n  const tomorrowSolarTime = new SolarTime(tomorrow, {\n    ...coordinates,\n    latitude,\n  });\n  if (!isValidSolarTime(solarTime) || !isValidSolarTime(tomorrowSolarTime)) {\n    return Math.abs(latitude) >= UNSAFE_LATITUDE\n      ? aqrabBaladResolver(\n          coordinates,\n          date,\n          latitude - Math.sign(latitude) * LATITUDE_VARIATION_STEP,\n        )\n      : null;\n  }\n\n  return {\n    date,\n    tomorrow,\n    coordinates: new Coordinates(latitude, coordinates.longitude),\n    solarTime,\n    tomorrowSolarTime,\n  };\n};\n\nexport const polarCircleResolvedValues = (\n  resolver: ValueOf<typeof PolarCircleResolution>,\n  date: Date,\n  coordinates: Coordinates,\n) => {\n  const defaultReturn = {\n    date,\n    tomorrow: dateByAddingDays(date, 1),\n    coordinates,\n    solarTime: new SolarTime(date, coordinates),\n    tomorrowSolarTime: new SolarTime(dateByAddingDays(date, 1), coordinates),\n  };\n\n  switch (resolver) {\n    case PolarCircleResolution.AqrabYaum: {\n      return aqrabYaumResolver(coordinates, date) || defaultReturn;\n    }\n    case PolarCircleResolution.AqrabBalad: {\n      const { latitude } = coordinates;\n      return (\n        aqrabBaladResolver(\n          coordinates,\n          date,\n          latitude - Math.sign(latitude) * LATITUDE_VARIATION_STEP,\n        ) || defaultReturn\n      );\n    }\n    default: {\n      return defaultReturn;\n    }\n  }\n};\n"],"file":"PolarCircleResolution.js"}